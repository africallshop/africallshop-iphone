.TH "Managing Buddies and buddy list and presence" 3 "Sun Oct 13 2013" "Version 3.6.99" "liblinphone" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Managing Buddies and buddy list and presence \- 
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBlinphone_friend_new_with_addr\fP   \fBlinphone_friend_new_with_address\fP"
.br
.ti -1c
.RI "#define \fBlinphone_friend_set_addr\fP   \fBlinphone_friend_set_address\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fB_LinphoneOnlineStatus\fP \fBLinphoneOnlineStatus\fP"
.br
.ti -1c
.RI "typedef struct _LinphoneFriend \fBLinphoneFriend\fP"
.br
.ti -1c
.RI "typedef enum 
.br
\fBLinphonePresenceBasicStatus\fP \fBLinphonePresenceBasicStatus\fP"
.br
.ti -1c
.RI "typedef enum 
.br
\fBLinphonePresenceActivityType\fP \fBLinphonePresenceActivityType\fP"
.br
.ti -1c
.RI "typedef struct 
.br
\fB_LinphonePresenceModel\fP \fBLinphonePresenceModel\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresencePerson \fBLinphonePresencePerson\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresenceService \fBLinphonePresenceService\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresenceActivity \fBLinphonePresenceActivity\fP"
.br
.ti -1c
.RI "typedef struct 
.br
_LinphonePresenceNote \fBLinphonePresenceNote\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBLinphoneSubscribePolicy\fP { \fBLinphoneSPWait\fP, \fBLinphoneSPDeny\fP, \fBLinphoneSPAccept\fP }"
.br
.ti -1c
.RI "enum \fB_LinphoneOnlineStatus\fP { \fBLinphoneStatusOffline\fP, \fBLinphoneStatusOnline\fP, \fBLinphoneStatusBusy\fP, \fBLinphoneStatusBeRightBack\fP, \fBLinphoneStatusAway\fP, \fBLinphoneStatusOnThePhone\fP, \fBLinphoneStatusOutToLunch\fP, \fBLinphoneStatusDoNotDisturb\fP, \fBLinphoneStatusMoved\fP, \fBLinphoneStatusAltService\fP, \fBLinphoneStatusPending\fP, \fBLinphoneStatusVacation\fP }"
.br
.ti -1c
.RI "enum \fBLinphonePresenceBasicStatus\fP { \fBLinphonePresenceBasicStatusOpen\fP, \fBLinphonePresenceBasicStatusClosed\fP }"
.br
.ti -1c
.RI "enum \fBLinphonePresenceActivityType\fP { \fBLinphonePresenceActivityOffline\fP, \fBLinphonePresenceActivityOnline\fP, \fBLinphonePresenceActivityAppointment\fP, \fBLinphonePresenceActivityAway\fP, \fBLinphonePresenceActivityBreakfast\fP, \fBLinphonePresenceActivityBusy\fP, \fBLinphonePresenceActivityDinner\fP, \fBLinphonePresenceActivityHoliday\fP, \fBLinphonePresenceActivityInTransit\fP, \fBLinphonePresenceActivityLookingForWork\fP, \fBLinphonePresenceActivityLunch\fP, \fBLinphonePresenceActivityMeal\fP, \fBLinphonePresenceActivityMeeting\fP, \fBLinphonePresenceActivityOnThePhone\fP, \fBLinphonePresenceActivityOther\fP, \fBLinphonePresenceActivityPerformance\fP, \fBLinphonePresenceActivityPermanentAbsence\fP, \fBLinphonePresenceActivityPlaying\fP, \fBLinphonePresenceActivityPresentation\fP, \fBLinphonePresenceActivityShopping\fP, \fBLinphonePresenceActivitySleeping\fP, \fBLinphonePresenceActivitySpectator\fP, \fBLinphonePresenceActivitySteering\fP, \fBLinphonePresenceActivityTravel\fP, \fBLinphonePresenceActivityTV\fP, \fBLinphonePresenceActivityUnknown\fP, \fBLinphonePresenceActivityVacation\fP, \fBLinphonePresenceActivityWorking\fP, \fBLinphonePresenceActivityWorship\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLinphoneFriend\fP * \fBlinphone_friend_new\fP ()"
.br
.ti -1c
.RI "\fBLinphoneFriend\fP * \fBlinphone_friend_new_with_address\fP (const char *addr)"
.br
.ti -1c
.RI "void \fBlinphone_friend_destroy\fP (\fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "int \fBlinphone_friend_set_address\fP (\fBLinphoneFriend\fP *fr, const \fBLinphoneAddress\fP *address)"
.br
.ti -1c
.RI "const \fBLinphoneAddress\fP * \fBlinphone_friend_get_address\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "int \fBlinphone_friend_set_name\fP (\fBLinphoneFriend\fP *lf, const char *name)"
.br
.ti -1c
.RI "const char * \fBlinphone_friend_get_name\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "bool_t \fBlinphone_friend_subscribes_enabled\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "int \fBlinphone_friend_enable_subscribes\fP (\fBLinphoneFriend\fP *fr, bool_t val)"
.br
.ti -1c
.RI "int \fBlinphone_friend_set_inc_subscribe_policy\fP (\fBLinphoneFriend\fP *fr, \fBLinphoneSubscribePolicy\fP pol)"
.br
.ti -1c
.RI "\fBLinphoneSubscribePolicy\fP \fBlinphone_friend_get_inc_subscribe_policy\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "void \fBlinphone_friend_edit\fP (\fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "void \fBlinphone_friend_done\fP (\fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "\fBLinphoneOnlineStatus\fP \fBlinphone_friend_get_status\fP (const \fBLinphoneFriend\fP *lf)"
.br
.RI "\fIGet the status of a friend\&. \fP"
.ti -1c
.RI "const \fBLinphonePresenceModel\fP * \fBlinphone_friend_get_presence_model\fP (\fBLinphoneFriend\fP *lf)"
.br
.RI "\fIGet the presence information of a friend\&. \fP"
.ti -1c
.RI "void \fBlinphone_friend_set_user_data\fP (\fBLinphoneFriend\fP *lf, void *data)"
.br
.ti -1c
.RI "void * \fBlinphone_friend_get_user_data\fP (const \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "const char * \fBlinphone_online_status_to_string\fP (\fBLinphoneOnlineStatus\fP ss)"
.br
.ti -1c
.RI "void \fBlinphone_core_set_presence_info\fP (\fBLinphoneCore\fP *lc, int minutes_away, const char *alternative_contact, \fBLinphoneOnlineStatus\fP os)"
.br
.RI "\fISet my presence status\&. \fP"
.ti -1c
.RI "void \fBlinphone_core_set_presence_model\fP (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
.br
.RI "\fISet my presence status\&. \fP"
.ti -1c
.RI "\fBLinphoneOnlineStatus\fP \fBlinphone_core_get_presence_info\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "\fIGet my presence status\&. \fP"
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_core_get_presence_model\fP (const \fBLinphoneCore\fP *lc)"
.br
.RI "\fIGet my presence status\&. \fP"
.ti -1c
.RI "void \fBlinphone_core_interpret_friend_uri\fP (\fBLinphoneCore\fP *lc, const char *uri, char **result)"
.br
.ti -1c
.RI "void \fBlinphone_core_add_friend\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "void \fBlinphone_core_remove_friend\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
.br
.ti -1c
.RI "void \fBlinphone_core_reject_subscriber\fP (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
.br
.ti -1c
.RI "const MSList * \fBlinphone_core_get_friend_list\fP (const \fBLinphoneCore\fP *lc)"
.br
.ti -1c
.RI "void \fBlinphone_core_notify_all_friends\fP (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new_with_activity\fP (\fBLinphonePresenceActivityType\fP activity, const char *description)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new_with_activity_and_note\fP (\fBLinphonePresenceActivityType\fP activity, const char *description, const char *note, const char *lang)"
.br
.ti -1c
.RI "\fBLinphonePresenceBasicStatus\fP \fBlinphone_presence_model_get_basic_status\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_set_basic_status\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceBasicStatus\fP basic_status)"
.br
.ti -1c
.RI "time_t \fBlinphone_presence_model_get_timestamp\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "char * \fBlinphone_presence_model_get_contact\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_set_contact\fP (\fBLinphonePresenceModel\fP *model, const char *contact)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_model_get_activity\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_set_activity\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivityType\fP activity, const char *description)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_model_nb_activities\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_model_get_nth_activity\fP (const \fBLinphonePresenceModel\fP *model, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_add_activity\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_clear_activities\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_model_get_note\fP (const \fBLinphonePresenceModel\fP *model, const char *lang)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_add_note\fP (\fBLinphonePresenceModel\fP *model, const char *note_content, const char *lang)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_clear_notes\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_new\fP (void)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_model_nb_services\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceService\fP * \fBlinphone_presence_model_get_nth_service\fP (const \fBLinphonePresenceModel\fP *model, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_add_service\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_clear_services\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_model_nb_persons\fP (const \fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresencePerson\fP * \fBlinphone_presence_model_get_nth_person\fP (const \fBLinphonePresenceModel\fP *model, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_add_person\fP (\fBLinphonePresenceModel\fP *model, \fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "int \fBlinphone_presence_model_clear_persons\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceService\fP * \fBlinphone_presence_service_new\fP (const char *id, \fBLinphonePresenceBasicStatus\fP, const char *contact)"
.br
.ti -1c
.RI "char * \fBlinphone_presence_service_get_id\fP (const \fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "int \fBlinphone_presence_service_set_id\fP (\fBLinphonePresenceService\fP *service, const char *id)"
.br
.ti -1c
.RI "\fBLinphonePresenceBasicStatus\fP \fBlinphone_presence_service_get_basic_status\fP (const \fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "int \fBlinphone_presence_service_set_basic_status\fP (\fBLinphonePresenceService\fP *service, \fBLinphonePresenceBasicStatus\fP basic_status)"
.br
.ti -1c
.RI "char * \fBlinphone_presence_service_get_contact\fP (const \fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "int \fBlinphone_presence_service_set_contact\fP (\fBLinphonePresenceService\fP *service, const char *contact)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_service_nb_notes\fP (const \fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_service_get_nth_note\fP (const \fBLinphonePresenceService\fP *service, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_service_add_note\fP (\fBLinphonePresenceService\fP *service, \fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "int \fBlinphone_presence_service_clear_notes\fP (\fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "\fBLinphonePresencePerson\fP * \fBlinphone_presence_person_new\fP (const char *id)"
.br
.ti -1c
.RI "char * \fBlinphone_presence_person_get_id\fP (const \fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_set_id\fP (\fBLinphonePresencePerson\fP *person, const char *id)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_person_nb_activities\fP (const \fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_person_get_nth_activity\fP (const \fBLinphonePresencePerson\fP *person, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_add_activity\fP (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_clear_activities\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_person_nb_notes\fP (const \fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_person_get_nth_note\fP (const \fBLinphonePresencePerson\fP *person, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_add_note\fP (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_clear_notes\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "unsigned int \fBlinphone_presence_person_nb_activities_notes\fP (const \fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_person_get_nth_activities_note\fP (const \fBLinphonePresencePerson\fP *person, unsigned int idx)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_add_activities_note\fP (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "int \fBlinphone_presence_person_clear_activities_notes\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_activity_new\fP (\fBLinphonePresenceActivityType\fP acttype, const char *description)"
.br
.ti -1c
.RI "char * \fBlinphone_presence_activity_to_string\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivityType\fP \fBlinphone_presence_activity_get_type\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "int \fBlinphone_presence_activity_set_type\fP (\fBLinphonePresenceActivity\fP *activity, \fBLinphonePresenceActivityType\fP acttype)"
.br
.ti -1c
.RI "const char * \fBlinphone_presence_activity_get_description\fP (const \fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "int \fBlinphone_presence_activity_set_description\fP (\fBLinphonePresenceActivity\fP *activity, const char *description)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_note_new\fP (const char *content, const char *lang)"
.br
.ti -1c
.RI "const char * \fBlinphone_presence_note_get_content\fP (const \fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "int \fBlinphone_presence_note_set_content\fP (\fBLinphonePresenceNote\fP *note, const char *content)"
.br
.ti -1c
.RI "const char * \fBlinphone_presence_note_get_lang\fP (const \fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "int \fBlinphone_presence_note_set_lang\fP (\fBLinphonePresenceNote\fP *note, const char *lang)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_ref\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceModel\fP * \fBlinphone_presence_model_unref\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "void \fBlinphone_presence_model_set_user_data\fP (\fBLinphonePresenceModel\fP *model, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_model_get_user_data\fP (\fBLinphonePresenceModel\fP *model)"
.br
.ti -1c
.RI "\fBLinphonePresenceService\fP * \fBlinphone_presence_service_ref\fP (\fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "\fBLinphonePresenceService\fP * \fBlinphone_presence_service_unref\fP (\fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "void \fBlinphone_presence_service_set_user_data\fP (\fBLinphonePresenceService\fP *service, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_service_get_user_data\fP (\fBLinphonePresenceService\fP *service)"
.br
.ti -1c
.RI "\fBLinphonePresencePerson\fP * \fBlinphone_presence_person_ref\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresencePerson\fP * \fBlinphone_presence_person_unref\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "void \fBlinphone_presence_person_set_user_data\fP (\fBLinphonePresencePerson\fP *person, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_person_get_user_data\fP (\fBLinphonePresencePerson\fP *person)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_activity_ref\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "\fBLinphonePresenceActivity\fP * \fBlinphone_presence_activity_unref\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "void \fBlinphone_presence_activity_set_user_data\fP (\fBLinphonePresenceActivity\fP *activity, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_activity_get_user_data\fP (\fBLinphonePresenceActivity\fP *activity)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_note_ref\fP (\fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "\fBLinphonePresenceNote\fP * \fBlinphone_presence_note_unref\fP (\fBLinphonePresenceNote\fP *note)"
.br
.ti -1c
.RI "void \fBlinphone_presence_note_set_user_data\fP (\fBLinphonePresenceNote\fP *note, void *user_data)"
.br
.ti -1c
.RI "void * \fBlinphone_presence_note_get_user_data\fP (\fBLinphonePresenceNote\fP *note)"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fBBuddies and buddy list\fP 
.br
Each buddy is represented by a \fBLinphoneFriend\fP object created by function \fBlinphone_friend_new()\fP\&. Buddy configuration parameters like \fBsip uri \fP or \fBstatus publication \fP policy for this \fBfriend \fP are configurable for each buddy\&. 
.br
Here under a typical buddy creation: 
.br
 
.PP
.nf
LinphoneFriend* my_friend=linphone_friend_new_with_addr("sip:joe@sip\&.linphone\&.org"); /*creates friend object for buddy joe*/
linphone_friend_enable_subscribes(my_friend,TRUE); /*configure this friend to emit SUBSCRIBE message after being added to LinphoneCore*/
linphone_friend_set_inc_subscribe_policy(my_friend,LinphoneSPAccept); /* accept Incoming subscription request for this friend*/

.fi
.PP
 \fBfriends \fP status changes are reported by callback \fBLinphoneCoreVTable\&.notify_presence_recv\fP 
.PP
.nf
static void notify_presence_recv_updated (struct _LinphoneCore *lc,  LinphoneFriend *friend) {
        const LinphoneAddress* friend_address = linphone_friend_get_address(friend);
        printf("New state state [%s] for user id [%s] \n"
                                ,linphone_online_status_to_string(linphone_friend_get_status(friend))
                                ,linphone_address_as_string (friend_address));
}

.fi
.PP
 
.br
Once created a buddy can be added to the buddy list using function \fBlinphone_core_add_friend()\fP \&. Added friends will be notified about \fBlocal status changes \fP 
.br
 Any subsequente modifications to \fBLinphoneFriend\fP must be first started by a call to function \fBlinphone_friend_edit()\fP and validated by function \fBlinphone_friend_done()\fP 
.PP
.nf
linphone_friend_edit(my_friend); /* start editing friend */
linphone_friend_enable_subscribes(my_friend,FALSE); /*disable subscription for this friend*/
linphone_friend_done(my_friend); /*commit changes triggering an UNSUBSCRIBE message*/

.fi
.PP
.PP
\fB Publishing presence status \fP 
.br
Local presence status can be changed using function \fBlinphone_core_set_presence_model()\fP \&.New status is propagated to all friends \fBpreviously added \fP to \fBLinphoneCore\fP\&.
.PP
\fBHandling incoming subscription request\fP 
.br
 New incoming subscription requests are process according to \fBthe incoming subscription policy state \fP for subscription initiated by \fBmembers of the buddy list\&. \fP 
.br
 For incoming request comming from an unknown buddy, the call back \fBLinphoneCoreVTable\&.new_subscription_request\fP is invoked\&.
.PP

.br
 A complete tutorial can be found at : \fBRegistration tutorial\fP 
.SH "Macro Definition Documentation"
.PP 
.SS "#define linphone_friend_new_with_addr   \fBlinphone_friend_new_with_address\fP"
Contructor same as \fBlinphone_friend_new()\fP + \fBlinphone_friend_set_address()\fP 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_friend_new_with_address\fP instead 
.RE
.PP

.SS "#define linphone_friend_set_addr   \fBlinphone_friend_set_address\fP"
Set \fBLinphoneAddress\fP for this friend 
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_friend_set_address\fP instead 
.RE
.PP

.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fB_LinphoneOnlineStatus\fP \fBLinphoneOnlineStatus\fP"
Enum describing remote friend status 
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP and \fBLinphonePresenceActivity\fP instead 
.RE
.PP

.SS "typedef struct _LinphoneFriend \fBLinphoneFriend\fP"
Represents a buddy, all presence actions like subscription and status change notification are performed on this object 
.SS "typedef enum \fBLinphonePresenceBasicStatus\fP  \fBLinphonePresenceBasicStatus\fP"
Basic status as defined in section 4\&.1\&.4 of RFC 3863 
.SS "typedef enum \fBLinphonePresenceActivityType\fP  \fBLinphonePresenceActivityType\fP"
Activities as defined in section 3\&.2 of RFC 4480 
.SS "typedef struct \fB_LinphonePresenceModel\fP \fBLinphonePresenceModel\fP"
Presence model type holding information about the presence of a person\&. 
.SS "typedef struct _LinphonePresencePerson \fBLinphonePresencePerson\fP"
Presence person holding information about a presence person\&. 
.SS "typedef struct _LinphonePresenceService \fBLinphonePresenceService\fP"
Presence service type holding information about a presence service\&. 
.SS "typedef struct _LinphonePresenceActivity \fBLinphonePresenceActivity\fP"
Presence activity type holding information about a presence activity\&. 
.SS "typedef struct _LinphonePresenceNote \fBLinphonePresenceNote\fP"
Presence note type holding information about a presence note\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBLinphoneSubscribePolicy\fP"
Enum controlling behavior for incoming subscription request\&. 
.br
 Use by \fBlinphone_friend_set_inc_subscribe_policy()\fP 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneSPWait \fP\fP
Does not automatically accept an incoming subscription request\&. This policy implies that a decision has to be taken for each incoming subscription request notified by callback \fBLinphoneCoreVTable\&.new_subscription_request\fP 
.TP
\fB\fILinphoneSPDeny \fP\fP
Rejects incoming subscription request\&. 
.TP
\fB\fILinphoneSPAccept \fP\fP
Automatically accepts a subscription request\&. 
.SS "enum \fB_LinphoneOnlineStatus\fP"
Enum describing remote friend status 
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP and \fBLinphonePresenceActivity\fP instead 
.RE
.PP

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphoneStatusOffline \fP\fP
Offline 
.TP
\fB\fILinphoneStatusOnline \fP\fP
Online 
.TP
\fB\fILinphoneStatusBusy \fP\fP
Busy 
.TP
\fB\fILinphoneStatusBeRightBack \fP\fP
Be right back 
.TP
\fB\fILinphoneStatusAway \fP\fP
Away 
.TP
\fB\fILinphoneStatusOnThePhone \fP\fP
On the phone 
.TP
\fB\fILinphoneStatusOutToLunch \fP\fP
Out to lunch 
.TP
\fB\fILinphoneStatusDoNotDisturb \fP\fP
Do not disturb 
.TP
\fB\fILinphoneStatusMoved \fP\fP
Moved in this sate, call can be redirected if an alternate contact address has been set using function \fBlinphone_core_set_presence_info()\fP 
.TP
\fB\fILinphoneStatusAltService \fP\fP
Using another messaging service 
.TP
\fB\fILinphoneStatusPending \fP\fP
Pending 
.TP
\fB\fILinphoneStatusVacation \fP\fP
Vacation 
.SS "enum \fBLinphonePresenceBasicStatus\fP"
Basic status as defined in section 4\&.1\&.4 of RFC 3863 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePresenceBasicStatusOpen \fP\fP
This value means that the associated contact element, if any, is ready to accept communication\&. 
.TP
\fB\fILinphonePresenceBasicStatusClosed \fP\fP
This value means that the associated contact element, if any, is unable to accept communication\&. 
.SS "enum \fBLinphonePresenceActivityType\fP"
Activities as defined in section 3\&.2 of RFC 4480 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fILinphonePresenceActivityOffline \fP\fP
This value is not defined in the RFC, it corresponds to no activity with a basic status of 'closed'\&. 
.TP
\fB\fILinphonePresenceActivityOnline \fP\fP
This value is not defined in the RFC, it corresponds to no activity with a basic status of 'open'\&. 
.TP
\fB\fILinphonePresenceActivityAppointment \fP\fP
The person has a calendar appointment, without specifying exactly of what type\&. This activity is indicated if more detailed information is not available or the person chooses not to reveal more information\&. 
.TP
\fB\fILinphonePresenceActivityAway \fP\fP
The person is physically away from all interactive communication devices\&. 
.TP
\fB\fILinphonePresenceActivityBreakfast \fP\fP
The person is eating the first meal of the day, usually eaten in the morning\&. 
.TP
\fB\fILinphonePresenceActivityBusy \fP\fP
The person is busy, without further details\&. 
.TP
\fB\fILinphonePresenceActivityDinner \fP\fP
The person is having his or her main meal of the day, eaten in the evening or at midday\&. 
.TP
\fB\fILinphonePresenceActivityHoliday \fP\fP
This is a scheduled national or local holiday\&. 
.TP
\fB\fILinphonePresenceActivityInTransit \fP\fP
The person is riding in a vehicle, such as a car, but not steering\&. 
.TP
\fB\fILinphonePresenceActivityLookingForWork \fP\fP
The person is looking for (paid) work\&. 
.TP
\fB\fILinphonePresenceActivityLunch \fP\fP
The person is eating his or her midday meal\&. 
.TP
\fB\fILinphonePresenceActivityMeal \fP\fP
The person is scheduled for a meal, without specifying whether it is breakfast, lunch, or dinner, or some other meal\&. 
.TP
\fB\fILinphonePresenceActivityMeeting \fP\fP
The person is in an assembly or gathering of people, as for a business, social, or religious purpose\&. A meeting is a sub-class of an appointment\&. 
.TP
\fB\fILinphonePresenceActivityOnThePhone \fP\fP
The person is talking on the telephone\&. 
.TP
\fB\fILinphonePresenceActivityOther \fP\fP
The person is engaged in an activity with no defined representation\&. A string describing the activity in plain text SHOULD be provided\&. 
.TP
\fB\fILinphonePresenceActivityPerformance \fP\fP
A performance is a sub-class of an appointment and includes musical, theatrical, and cinematic performances as well as lectures\&. It is distinguished from a meeting by the fact that the person may either be lecturing or be in the audience, with a potentially large number of other people, making interruptions particularly noticeable\&. 
.TP
\fB\fILinphonePresenceActivityPermanentAbsence \fP\fP
The person will not return for the foreseeable future, e\&.g\&., because it is no longer working for the company\&. 
.TP
\fB\fILinphonePresenceActivityPlaying \fP\fP
The person is occupying himself or herself in amusement, sport, or other recreation\&. 
.TP
\fB\fILinphonePresenceActivityPresentation \fP\fP
The person is giving a presentation, lecture, or participating in a formal round-table discussion\&. 
.TP
\fB\fILinphonePresenceActivityShopping \fP\fP
The person is visiting stores in search of goods or services\&. 
.TP
\fB\fILinphonePresenceActivitySleeping \fP\fP
The person is sleeping\&. 
.TP
\fB\fILinphonePresenceActivitySpectator \fP\fP
The person is observing an event, such as a sports event\&. 
.TP
\fB\fILinphonePresenceActivitySteering \fP\fP
The person is controlling a vehicle, watercraft, or plane\&. 
.TP
\fB\fILinphonePresenceActivityTravel \fP\fP
The person is on a business or personal trip, but not necessarily in-transit\&. 
.TP
\fB\fILinphonePresenceActivityTV \fP\fP
The person is watching television\&. 
.TP
\fB\fILinphonePresenceActivityUnknown \fP\fP
The activity of the person is unknown\&. 
.TP
\fB\fILinphonePresenceActivityVacation \fP\fP
A period of time devoted to pleasure, rest, or relaxation\&. 
.TP
\fB\fILinphonePresenceActivityWorking \fP\fP
The person is engaged in, typically paid, labor, as part of a profession or job\&. 
.TP
\fB\fILinphonePresenceActivityWorship \fP\fP
The person is participating in religious rites\&. 
.SH "Function Documentation"
.PP 
.SS "\fBLinphoneFriend\fP* linphone_friend_new ()"
Contructor 
.PP
\fBReturns:\fP
.RS 4
a new empty \fBLinphoneFriend\fP 
.RE
.PP

.SS "\fBLinphoneFriend\fP* linphone_friend_new_with_address (const char *addr)"
Contructor same as \fBlinphone_friend_new()\fP + \fBlinphone_friend_set_address()\fP 
.PP
\fBParameters:\fP
.RS 4
\fIaddr\fP a buddy address, must be a sip uri like sip:joe@sip.linphone.org 
.RE
.PP
\fBReturns:\fP
.RS 4
a new \fBLinphoneFriend\fP with \fBaddress initialized \fP 
.RE
.PP

.SS "void linphone_friend_destroy (\fBLinphoneFriend\fP *lf)"
Destructor 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP

.SS "int linphone_friend_set_address (\fBLinphoneFriend\fP *fr, const \fBLinphoneAddress\fP *address)"
Set \fBLinphoneAddress\fP for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIaddress\fP \fBLinphoneAddress\fP 
.RE
.PP

.SS "const \fBLinphoneAddress\fP* linphone_friend_get_address (const \fBLinphoneFriend\fP *lf)"
Get address of this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneAddress\fP 
.RE
.PP

.SS "int linphone_friend_set_name (\fBLinphoneFriend\fP *lf, const char *name)"
Set the display name for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.br
\fIname\fP 
.RE
.PP

.SS "const char* linphone_friend_get_name (const \fBLinphoneFriend\fP *lf)"
Get the display name for this friend 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
The display name of this friend 
.RE
.PP

.SS "bool_t linphone_friend_subscribes_enabled (const \fBLinphoneFriend\fP *lf)"
get subscription flag value 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
returns true is subscription is activated for this friend 
.RE
.PP

.SS "int linphone_friend_enable_subscribes (\fBLinphoneFriend\fP *fr, bool_tval)"
Configure \fBLinphoneFriend\fP to subscribe to presence information 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIval\fP if TRUE this friend will receive subscription message 
.RE
.PP

.SS "int linphone_friend_set_inc_subscribe_policy (\fBLinphoneFriend\fP *fr, \fBLinphoneSubscribePolicy\fPpol)"
Configure incoming subscription policy for this friend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.br
\fIpol\fP \fBLinphoneSubscribePolicy\fP policy to apply\&. 
.RE
.PP

.SS "\fBLinphoneSubscribePolicy\fP linphone_friend_get_inc_subscribe_policy (const \fBLinphoneFriend\fP *lf)"
get current subscription policy for this \fBLinphoneFriend\fP 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneSubscribePolicy\fP 
.RE
.PP

.SS "void linphone_friend_edit (\fBLinphoneFriend\fP *fr)"
Starts editing a friend configuration\&.
.PP
Because friend configuration must be consistent, applications MUST call \fBlinphone_friend_edit()\fP before doing any attempts to modify friend configuration (such as \fBaddress \fP or \fBsubscription policy\fP and so on)\&. Once the modifications are done, then the application must call \fBlinphone_friend_done()\fP to commit the changes\&. 
.SS "void linphone_friend_done (\fBLinphoneFriend\fP *fr)"
Commits modification made to the friend configuration\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfr\fP \fBLinphoneFriend\fP object 
.RE
.PP

.SS "\fBLinphoneOnlineStatus\fP linphone_friend_get_status (const \fBLinphoneFriend\fP *lf)"

.PP
Get the status of a friend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP A \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_friend_get_presence_model()\fP instead 
.RE
.PP

.SS "const \fBLinphonePresenceModel\fP* linphone_friend_get_presence_model (\fBLinphoneFriend\fP *lf)"

.PP
Get the presence information of a friend\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlf\fP A \fBLinphoneFriend\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceModel\fP object, or NULL if the friend do not have presence information (in which case he is considered offline) 
.RE
.PP

.SS "void linphone_friend_set_user_data (\fBLinphoneFriend\fP *lf, void *data)"
Store user pointer to friend object\&. 
.SS "void* linphone_friend_get_user_data (const \fBLinphoneFriend\fP *lf)"
Retrieve user data associated with friend\&. 
.SS "const char* linphone_online_status_to_string (\fBLinphoneOnlineStatus\fPss)"
Return humain readable presence status 
.PP
\fBParameters:\fP
.RS 4
\fIss\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBLinphonePresenceModel\fP, \fBLinphonePresenceActivity\fP and \fBlinphone_presence_activity_to_string()\fP instead\&. 
.RE
.PP

.SS "void linphone_core_set_presence_info (\fBLinphoneCore\fP *lc, intminutes_away, const char *alternative_contact, \fBLinphoneOnlineStatus\fPos)"

.PP
Set my presence status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIminutes_away\fP how long in away 
.br
\fIalternative_contact\fP sip uri used to redirect call in state \fBLinphoneStatusMoved\fP 
.br
\fIos\fP \fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_set_presence_model()\fP instead 
.RE
.PP

.SS "void linphone_core_set_presence_model (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"

.PP
Set my presence status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIpresence\fP \fBLinphonePresenceModel\fP 
.RE
.PP

.SS "\fBLinphoneOnlineStatus\fP linphone_core_get_presence_info (const \fBLinphoneCore\fP *lc)"

.PP
Get my presence status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
\fBLinphoneOnlineStatus\fP 
.RE
.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_get_presence_model()\fP instead 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_core_get_presence_model (const \fBLinphoneCore\fP *lc)"

.PP
Get my presence status\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceModel\fP object, or NULL if no presence model has been set\&. 
.RE
.PP

.SS "void linphone_core_interpret_friend_uri (\fBLinphoneCore\fP *lc, const char *uri, char **result)"

.PP
\fBDeprecated\fP
.RS 4
Use \fBlinphone_core_interpret_url()\fP instead 
.RE
.PP

.SS "void linphone_core_add_friend (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
Add a friend to the current buddy list, if \fBsubscription attribute \fP is set, a SIP SUBSCRIBE message is sent\&. 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIfr\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "void linphone_core_remove_friend (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *fr)"
remove a friend from the buddy list 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIfr\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "void linphone_core_reject_subscriber (\fBLinphoneCore\fP *lc, \fBLinphoneFriend\fP *lf)"
Black list a friend\&. same as \fBlinphone_friend_set_inc_subscribe_policy()\fP with \fBLinphoneSPDeny\fP policy; 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIlf\fP \fBLinphoneFriend\fP to add 
.RE
.PP

.SS "const MSList* linphone_core_get_friend_list (const \fBLinphoneCore\fP *lc)"
get Buddy list of LinphoneFriend 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.RE
.PP

.SS "void linphone_core_notify_all_friends (\fBLinphoneCore\fP *lc, \fBLinphonePresenceModel\fP *presence)"
notify all friends that have subscribed 
.PP
\fBParameters:\fP
.RS 4
\fIlc\fP \fBLinphoneCore\fP object 
.br
\fIpresence\fP \fBLinphonePresenceModel\fP to notify 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_new_with_activity (\fBLinphonePresenceActivityType\fPactivity, const char *description)"
Creates a presence model specifying an activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The activity to set for the created presence model\&. 
.br
\fIdescription\fP An additional description of the activity (mainly useful for the 'other' activity)\&. Set it to NULL to not add a description\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence model, or NULL if an error occured\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model has the activity specified in the parameters\&. 
.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_new_with_activity_and_note (\fBLinphonePresenceActivityType\fPactivity, const char *description, const char *note, const char *lang)"
Creates a presence model specifying an activity and adding a note\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The activity to set for the created presence model\&. 
.br
\fIdescription\fP An additional description of the activity (mainly useful for the 'other' activity)\&. Set it to NULL to not add a description\&. 
.br
\fInote\fP An additional note giving additional information about the contact presence\&. 
.br
\fIlang\fP The language the note is written in\&. It can be set to NULL in order to not specify the language of the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence model, or NULL if an error occured\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new_with_activity\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model has the activity and the note specified in the parameters\&. 
.SS "\fBLinphonePresenceBasicStatus\fP linphone_presence_model_get_basic_status (const \fBLinphonePresenceModel\fP *model)"
Gets the basic status of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the basic status from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceBasicStatus\fP of the \fBLinphonePresenceModel\fP object given as parameter\&. 
.RE
.PP

.SS "int linphone_presence_model_set_basic_status (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceBasicStatus\fPbasic_status)"
Sets the basic status of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the basic status\&. 
.br
\fIbasic_status\fP The \fBLinphonePresenceBasicStatus\fP to set for the \fBLinphonePresenceModel\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "time_t linphone_presence_model_get_timestamp (const \fBLinphonePresenceModel\fP *model)"
Gets the timestamp of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the timestamp from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The timestamp of the \fBLinphonePresenceModel\fP object or -1 on error\&. 
.RE
.PP

.SS "char* linphone_presence_model_get_contact (const \fBLinphonePresenceModel\fP *model)"
Gets the contact of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the contact from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "int linphone_presence_model_set_contact (\fBLinphonePresenceModel\fP *model, const char *contact)"
Sets the contact of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the contact\&. 
.br
\fIcontact\fP The contact string to set\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_model_get_activity (const \fBLinphonePresenceModel\fP *model)"
Gets the first activity of a presence model (there is usually only one)\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the activity from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A \fBLinphonePresenceActivity\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_model_set_activity (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivityType\fPactivity, const char *description)"
Sets the activity of a presence model (limits to only one activity)\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the activity\&. 
.br
\fIactivity\fP The \fBLinphonePresenceActivityType\fP to set for the model\&. 
.br
\fIdescription\fP An additional description of the activity to set for the model\&. Can be NULL if no additional description is to be added\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&.
.RE
.PP
WARNING: This function will modify the basic status of the model according to the activity being set\&. If you don't want the basic status to be modified automatically, you can use the combination of \fBlinphone_presence_model_set_basic_status()\fP, \fBlinphone_presence_model_clear_activities()\fP and \fBlinphone_presence_model_add_activity()\fP\&. 
.SS "unsigned int linphone_presence_model_nb_activities (const \fBLinphonePresenceModel\fP *model)"
Gets the number of activities included in the presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the number of activities from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of activities included in the \fBLinphonePresenceModel\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_model_get_nth_activity (const \fBLinphonePresenceModel\fP *model, unsigned intidx)"
Gets the nth activity of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the activity from\&. 
.br
\fIidx\fP The index of the activity to get (the first activity having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceActivity\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_model_add_activity (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceActivity\fP *activity)"
Adds an activity to a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to add an activity\&. 
.br
\fIactivity\fP The \fBLinphonePresenceActivity\fP object to add to the model\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_model_clear_activities (\fBLinphonePresenceModel\fP *model)"
Clears the activities of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to clear the activities\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_model_get_note (const \fBLinphonePresenceModel\fP *model, const char *lang)"
Gets the first note of a presence model (there is usually only one)\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the note from\&. 
.br
\fIlang\fP The language of the note to get\&. Can be NULL to get a note that has no language specified or to get the first note whatever language it is written into\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceNote\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_model_add_note (\fBLinphonePresenceModel\fP *model, const char *note_content, const char *lang)"
Adds a note to a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to add a note to\&. 
.br
\fInote_content\fP The note to be added to the presence model\&. 
.br
\fIlang\fP The language of the note to be added\&. Can be NULL if no language is to be specified for the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&.
.RE
.PP
Only one note for each language can be set, so e\&.g\&. setting a note for the 'fr' language if there is only one will replace the existing one\&. 
.SS "int linphone_presence_model_clear_notes (\fBLinphonePresenceModel\fP *model)"
Clears all the notes of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP for which to clear notes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_new (void)"
Creates a default presence model\&. 
.PP
\fBReturns:\fP
.RS 4
The created presence model, NULL on error\&. 
.RE
.PP
\fBSee Also:\fP
.RS 4
\fBlinphone_presence_model_new_with_activity\fP 
.PP
\fBlinphone_presence_model_new_with_activity_and_note\fP
.RE
.PP
The created presence model is considered 'offline'\&. 
.SS "unsigned int linphone_presence_model_nb_services (const \fBLinphonePresenceModel\fP *model)"
Gets the number of services included in the presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the number of services from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of services included in the \fBLinphonePresenceModel\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceService\fP* linphone_presence_model_get_nth_service (const \fBLinphonePresenceModel\fP *model, unsigned intidx)"
Gets the nth service of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the service from\&. 
.br
\fIidx\fP The index of the service to get (the first service having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceService\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_model_add_service (\fBLinphonePresenceModel\fP *model, \fBLinphonePresenceService\fP *service)"
Adds a service to a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to add a service\&. 
.br
\fIservice\fP The \fBLinphonePresenceService\fP object to add to the model\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_model_clear_services (\fBLinphonePresenceModel\fP *model)"
Clears the services of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to clear the services\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "unsigned int linphone_presence_model_nb_persons (const \fBLinphonePresenceModel\fP *model)"
Gets the number of persons included in the presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the number of persons from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of persons included in the \fBLinphonePresenceModel\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresencePerson\fP* linphone_presence_model_get_nth_person (const \fBLinphonePresenceModel\fP *model, unsigned intidx)"
Gets the nth person of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object to get the person from\&. 
.br
\fIidx\fP The index of the person to get (the first person having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresencePerson\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_model_add_person (\fBLinphonePresenceModel\fP *model, \fBLinphonePresencePerson\fP *person)"
Adds a person to a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to add a person\&. 
.br
\fIperson\fP The \fBLinphonePresencePerson\fP object to add to the model\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_model_clear_persons (\fBLinphonePresenceModel\fP *model)"
Clears the persons of a presence model\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to clear the persons\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceService\fP* linphone_presence_service_new (const char *id, \fBLinphonePresenceBasicStatus\fP, const char *contact)"
Creates a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The id of the presence service to be created\&. Can be NULL to generate it automatically\&. 
.br
\fIbasic_status\fP The \fBLinphonePresenceBasicStatus\fP to set for the \fBLinphonePresenceService\fP object\&. 
.br
\fIcontact\fP The contact string to set\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence service, NULL on error\&.
.RE
.PP
The created presence service has the basic status 'closed'\&. 
.SS "char* linphone_presence_service_get_id (const \fBLinphonePresenceService\fP *service)"
Gets the id of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object to get the id from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a dynamically allocated string containing the id, or NULL in case of error\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "int linphone_presence_service_set_id (\fBLinphonePresenceService\fP *service, const char *id)"
Sets the id of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to set the id\&. 
.br
\fIid\fP The id string to set\&. Can be NULL to generate it automatically\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceBasicStatus\fP linphone_presence_service_get_basic_status (const \fBLinphonePresenceService\fP *service)"
Gets the basic status of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object to get the basic status from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceBasicStatus\fP of the \fBLinphonePresenceService\fP object given as parameter\&. 
.RE
.PP

.SS "int linphone_presence_service_set_basic_status (\fBLinphonePresenceService\fP *service, \fBLinphonePresenceBasicStatus\fPbasic_status)"
Sets the basic status of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to set the basic status\&. 
.br
\fIbasic_status\fP The \fBLinphonePresenceBasicStatus\fP to set for the \fBLinphonePresenceService\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "char* linphone_presence_service_get_contact (const \fBLinphonePresenceService\fP *service)"
Gets the contact of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object to get the contact from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a dynamically allocated string containing the contact, or NULL if no contact is found\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "int linphone_presence_service_set_contact (\fBLinphonePresenceService\fP *service, const char *contact)"
Sets the contact of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to set the contact\&. 
.br
\fIcontact\fP The contact string to set\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "unsigned int linphone_presence_service_nb_notes (const \fBLinphonePresenceService\fP *service)"
Gets the number of notes included in the presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object to get the number of notes from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of notes included in the \fBLinphonePresenceService\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_service_get_nth_note (const \fBLinphonePresenceService\fP *service, unsigned intidx)"
Gets the nth note of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object to get the note from\&. 
.br
\fIidx\fP The index of the note to get (the first note having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceNote\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_service_add_note (\fBLinphonePresenceService\fP *service, \fBLinphonePresenceNote\fP *note)"
Adds a note to a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to add a note\&. 
.br
\fInote\fP The \fBLinphonePresenceNote\fP object to add to the service\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_service_clear_notes (\fBLinphonePresenceService\fP *service)"
Clears the notes of a presence service\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to clear the notes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresencePerson\fP* linphone_presence_person_new (const char *id)"
Creates a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIid\fP The id of the presence person to be created\&. Can be NULL to generate it automatically\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence person, NULL on error\&. 
.RE
.PP

.SS "char* linphone_presence_person_get_id (const \fBLinphonePresencePerson\fP *person)"
Gets the id of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the id from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a dynamically allocated string containing the id, or NULL in case of error\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "int linphone_presence_person_set_id (\fBLinphonePresencePerson\fP *person, const char *id)"
Sets the id of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to set the id\&. 
.br
\fIid\fP The id string to set\&. Can be NULL to generate it automatically\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "unsigned int linphone_presence_person_nb_activities (const \fBLinphonePresencePerson\fP *person)"
Gets the number of activities included in the presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the number of activities from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of activities included in the \fBLinphonePresencePerson\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_person_get_nth_activity (const \fBLinphonePresencePerson\fP *person, unsigned intidx)"
Gets the nth activity of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the activity from\&. 
.br
\fIidx\fP The index of the activity to get (the first activity having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceActivity\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_person_add_activity (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceActivity\fP *activity)"
Adds an activity to a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to add an activity\&. 
.br
\fIactivity\fP The \fBLinphonePresenceActivity\fP object to add to the person\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_person_clear_activities (\fBLinphonePresencePerson\fP *person)"
Clears the activities of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to clear the activities\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "unsigned int linphone_presence_person_nb_notes (const \fBLinphonePresencePerson\fP *person)"
Gets the number of notes included in the presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the number of notes from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of notes included in the \fBLinphonePresencePerson\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_person_get_nth_note (const \fBLinphonePresencePerson\fP *person, unsigned intidx)"
Gets the nth note of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the note from\&. 
.br
\fIidx\fP The index of the note to get (the first note having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceNote\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_person_add_note (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceNote\fP *note)"
Adds a note to a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to add a note\&. 
.br
\fInote\fP The \fBLinphonePresenceNote\fP object to add to the person\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_person_clear_notes (\fBLinphonePresencePerson\fP *person)"
Clears the notes of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to clear the notes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "unsigned int linphone_presence_person_nb_activities_notes (const \fBLinphonePresencePerson\fP *person)"
Gets the number of activities notes included in the presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the number of activities notes from\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of activities notes included in the \fBLinphonePresencePerson\fP object\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_person_get_nth_activities_note (const \fBLinphonePresencePerson\fP *person, unsigned intidx)"
Gets the nth activities note of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object to get the activities note from\&. 
.br
\fIidx\fP The index of the activities note to get (the first note having the index 0)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to a \fBLinphonePresenceNote\fP object if successful, NULL otherwise\&. 
.RE
.PP

.SS "int linphone_presence_person_add_activities_note (\fBLinphonePresencePerson\fP *person, \fBLinphonePresenceNote\fP *note)"
Adds an activities note to a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to add an activities note\&. 
.br
\fInote\fP The \fBLinphonePresenceNote\fP object to add to the person\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "int linphone_presence_person_clear_activities_notes (\fBLinphonePresencePerson\fP *person)"
Clears the activities notes of a presence person\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to clear the activities notes\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_activity_new (\fBLinphonePresenceActivityType\fPacttype, const char *description)"
Creates a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIacttype\fP The \fBLinphonePresenceActivityType\fP to set for the activity\&. 
.br
\fIdescription\fP An additional description of the activity to set for the activity\&. Can be NULL if no additional description is to be added\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence activity, NULL on error\&. 
.RE
.PP

.SS "char* linphone_presence_activity_to_string (const \fBLinphonePresenceActivity\fP *activity)"
Gets the string representation of a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP object for which to get a string representation\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer a dynamically allocated string representing the given activity\&.
.RE
.PP
The returned string is to be freed by calling ms_free()\&. 
.SS "\fBLinphonePresenceActivityType\fP linphone_presence_activity_get_type (const \fBLinphonePresenceActivity\fP *activity)"
Gets the activity type of a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP for which to get the type\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivityType\fP of the activity\&. 
.RE
.PP

.SS "int linphone_presence_activity_set_type (\fBLinphonePresenceActivity\fP *activity, \fBLinphonePresenceActivityType\fPacttype)"
Sets the type of activity of a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP for which to set for the activity type\&. 
.br
\fIacttype\fP The activity type to set for the activity\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "const char* linphone_presence_activity_get_description (const \fBLinphonePresenceActivity\fP *activity)"
Gets the description of a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP A pointer to the \fBLinphonePresenceActivity\fP for which to get the description\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the description string of the presence activity, or NULL if no description is specified\&. 
.RE
.PP

.SS "int linphone_presence_activity_set_description (\fBLinphonePresenceActivity\fP *activity, const char *description)"
Sets the description of a presence activity\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which to set the description\&. 
.br
\fIdescription\fP An additional description of the activity\&. Can be NULL if no additional description is to be added\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_note_new (const char *content, const char *lang)"
Creates a presence note\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcontent\fP The content of the note to be created\&. 
.br
\fIlang\fP The language of the note to be created\&. Can be NULL if no language is to be specified for the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The created presence note, NULL on error\&. 
.RE
.PP

.SS "const char* linphone_presence_note_get_content (const \fBLinphonePresenceNote\fP *note)"
Gets the content of a presence note\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP A pointer to the \fBLinphonePresenceNote\fP for which to get the content\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the content of the presence note\&. 
.RE
.PP

.SS "int linphone_presence_note_set_content (\fBLinphonePresenceNote\fP *note, const char *content)"
Sets the content of a presence note\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to set the content\&. 
.br
\fIcontent\fP The content of the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "const char* linphone_presence_note_get_lang (const \fBLinphonePresenceNote\fP *note)"
Gets the language of a presence note\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP A pointer to the \fBLinphonePresenceNote\fP for which to get the language\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the language string of the presence note, or NULL if no language is specified\&. 
.RE
.PP

.SS "int linphone_presence_note_set_lang (\fBLinphonePresenceNote\fP *note, const char *lang)"
Sets the language of a presence note\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to set the language\&. 
.br
\fIlang\fP The language of the note\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
0 if successful, a value < 0 in case of error\&. 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_ref (\fBLinphonePresenceModel\fP *model)"
Increase the reference count of the \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceModel\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceModel\fP* linphone_presence_model_unref (\fBLinphonePresenceModel\fP *model)"
Decrease the reference count of the \fBLinphonePresenceModel\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceModel\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_model_set_user_data (\fBLinphonePresenceModel\fP *model, void *user_data)"
Sets the user data of a \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_model_get_user_data (\fBLinphonePresenceModel\fP *model)"
Gets the user data of a \fBLinphonePresenceModel\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fImodel\fP The \fBLinphonePresenceModel\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "\fBLinphonePresenceService\fP* linphone_presence_service_ref (\fBLinphonePresenceService\fP *service)"
Increase the reference count of the \fBLinphonePresenceService\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceService\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceService\fP* linphone_presence_service_unref (\fBLinphonePresenceService\fP *service)"
Decrease the reference count of the \fBLinphonePresenceService\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceService\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_service_set_user_data (\fBLinphonePresenceService\fP *service, void *user_data)"
Sets the user data of a \fBLinphonePresenceService\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_service_get_user_data (\fBLinphonePresenceService\fP *service)"
Gets the user data of a \fBLinphonePresenceService\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIservice\fP The \fBLinphonePresenceService\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "\fBLinphonePresencePerson\fP* linphone_presence_person_ref (\fBLinphonePresencePerson\fP *person)"
Increase the reference count of the \fBLinphonePresencePerson\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresencePerson\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresencePerson\fP* linphone_presence_person_unref (\fBLinphonePresencePerson\fP *person)"
Decrease the reference count of the \fBLinphonePresencePerson\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresencePerson\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_person_set_user_data (\fBLinphonePresencePerson\fP *person, void *user_data)"
Sets the user data of a \fBLinphonePresencePerson\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_person_get_user_data (\fBLinphonePresencePerson\fP *person)"
Gets the user data of a \fBLinphonePresencePerson\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIperson\fP The \fBLinphonePresencePerson\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_activity_ref (\fBLinphonePresenceActivity\fP *activity)"
Increase the reference count of the \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivity\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceActivity\fP* linphone_presence_activity_unref (\fBLinphonePresenceActivity\fP *activity)"
Decrease the reference count of the \fBLinphonePresenceActivity\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceActivity\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_activity_set_user_data (\fBLinphonePresenceActivity\fP *activity, void *user_data)"
Sets the user data of a \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_activity_get_user_data (\fBLinphonePresenceActivity\fP *activity)"
Gets the user data of a \fBLinphonePresenceActivity\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIactivity\fP The \fBLinphonePresenceActivity\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_note_ref (\fBLinphonePresenceNote\fP *note)"
Increase the reference count of the \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which the reference count is to be increased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceNote\fP object with the increased reference count\&. 
.RE
.PP

.SS "\fBLinphonePresenceNote\fP* linphone_presence_note_unref (\fBLinphonePresenceNote\fP *note)"
Decrease the reference count of the \fBLinphonePresenceNote\fP object and destroy it if it reaches 0\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which the reference count is to be decreased\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The \fBLinphonePresenceNote\fP object if the reference count is still positive, NULL if the object has been destroyed\&. 
.RE
.PP

.SS "void linphone_presence_note_set_user_data (\fBLinphonePresenceNote\fP *note, void *user_data)"
Sets the user data of a \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to set the user data\&. 
.br
\fIuser_data\fP A pointer to the user data to set\&. 
.RE
.PP

.SS "void* linphone_presence_note_get_user_data (\fBLinphonePresenceNote\fP *note)"
Gets the user data of a \fBLinphonePresenceNote\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fInote\fP The \fBLinphonePresenceNote\fP object for which to get the user data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the user data\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for liblinphone from the source code\&.
