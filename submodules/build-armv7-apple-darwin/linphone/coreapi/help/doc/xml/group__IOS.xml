<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="group__IOS" kind="group">
    <compoundname>IOS</compoundname>
    <title>IOS</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__IOS_1gaef3c840b3c9f576c642b49cf306c7461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linphone_core_start_dtmf_stream</definition>
        <argsstring>(LinphoneCore *lc)</argsstring>
        <name>linphone_core_start_dtmf_stream</name>
        <param>
          <type><ref refid="group__initializing_1gaa5cf635b82dd338e7ee2dd3599d05f0a" kindref="member">LinphoneCore</ref> *</type>
          <declname>lc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special function to warm up dtmf feeback stream. <ref refid="group__IOS_1gad0ecef2fb7a77c3363aa94edeadaf65b" kindref="member">linphone_core_stop_dtmf_stream</ref> must() be called before entering FG mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/karimjimo/Downloads/linphone-iphone/submodules/linphone/coreapi/linphonecore_utils.h" line="80" column="1" bodyfile="/Users/karimjimo/Downloads/linphone-iphone/submodules/linphone/coreapi/linphonecore.c" bodystart="5939" bodyend="5942"/>
      </memberdef>
      <memberdef kind="function" id="group__IOS_1gad0ecef2fb7a77c3363aa94edeadaf65b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void linphone_core_stop_dtmf_stream</definition>
        <argsstring>(LinphoneCore *lc)</argsstring>
        <name>linphone_core_stop_dtmf_stream</name>
        <param>
          <type><ref refid="group__initializing_1gaa5cf635b82dd338e7ee2dd3599d05f0a" kindref="member">LinphoneCore</ref> *</type>
          <declname>lc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Special function to stop dtmf feed back function. Must be called before entering BG mode </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/karimjimo/Downloads/linphone-iphone/submodules/linphone/coreapi/linphonecore_utils.h" line="85" column="1" bodyfile="/Users/karimjimo/Downloads/linphone-iphone/submodules/linphone/coreapi/linphonecore.c" bodystart="5961" bodyend="5965"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><linebreak/>
 <bold>Multitasking</bold> <linebreak/>
 Liblinphone for IOS natively supports multitasking assuming application follows multitasking guides provided by Apple. First step is to declare application as multitasked. It means adding background mode for both audio and voip to Info.plist file. <linebreak/>
 <programlisting><codeline><highlight class="normal">&lt;key&gt;UIBackgroundModes&lt;/key&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;array&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;voip&lt;/</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;audio&lt;/</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&lt;/array&gt;</highlight></codeline>
</programlisting> <linebreak/>
 <itemizedlist>
<listitem>
<para><bold>SIP socket </bold><linebreak/>
Recommended mode is SIP over TCP, because UDP usually requires frequent keep alives for maintaining NAT association at the IP router level. This can be as frequent as one UDP packet every 15 seconds to maintain the NAT association accross NAT routers. Doing such drains the battery very fast, and furthermore the iOS keep-alive designed by Apple to handle this task can only be called with a minimum of 10 minutes interval.<linebreak/>
 For TCP, liblinphone automatically configures SIP socket for voip (I.E kCFStreamNetworkServiceType set to kCFStreamNetworkServiceTypeVoIP). <linebreak/>
<bold>Since IOS &gt; 4.1 Apple disabled voip mode for UDP sockets </bold> </para></listitem>
<listitem>
<para><bold>Entering background mode</bold> <linebreak/>
 Before entering in background mode (through<programlisting><codeline><highlight class="normal">-<sp/>(void)applicationDidEnterBackground:(UIApplication<sp/>*)application<sp/></highlight></codeline>
</programlisting> ), the application must first refresh sip registration using function <ref refid="group__proxies_1ga130795ea67730f7b01f7b51fe6bdb44f" kindref="member">linphone_core_refresh_registers()</ref>; and register a keep-alive handler for periodically refreshing the registration. The speudo code below shows how to register a keep alive handler: <programlisting><codeline><highlight class="comment">//First<sp/>refresh<sp/>registration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__proxies_1ga130795ea67730f7b01f7b51fe6bdb44f" kindref="member">linphone_core_refresh_registers</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//wait<sp/>for<sp/>registration<sp/>answer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="group__proxies_1gaed2155106b24f7e418b67c2774b6a0c7" kindref="member">linphone_proxy_config_is_registered</ref>(proxyCfg)<sp/>&amp;&amp;<sp/>i++&lt;40<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__initializing_1ga7bdac8ac386483fc4e0876e4c5d13755" kindref="member">linphone_core_iterate</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>usleep(100000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//register<sp/>keepalive<sp/>handler</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[[UIApplication<sp/>sharedApplication]<sp/>setKeepAliveTimeout:600</highlight><highlight class="comment">/*minimal<sp/>interval<sp/>is<sp/>600<sp/>s*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handler:^{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//refresh<sp/>sip<sp/>registration</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__proxies_1ga130795ea67730f7b01f7b51fe6bdb44f" kindref="member">linphone_core_refresh_registers</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//make<sp/>sure<sp/>sip<sp/>REGISTER<sp/>is<sp/>sent</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__initializing_1ga7bdac8ac386483fc4e0876e4c5d13755" kindref="member">linphone_core_iterate</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}];</highlight></codeline>
</programlisting> </para></listitem>
<listitem>
<para><bold>Incoming call notification while in background mode</bold> <linebreak/>
Assuming application using liblinphone is well configured for multitasking, incoming calls arriving while liblinphone is in background mode will simply wakeup liblinphone thread but not resume GUI. To wakeup GUI, it is recommended to send a Local Notification to the user from the #LinphoneCallStateCb. Here under a speudo code for this operation: <programlisting><codeline><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>([UIApplication<sp/>sharedApplication].applicationState<sp/>!=<sp/><sp/>UIApplicationStateActive)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>new<sp/>notification</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UILocalNotification*<sp/>notif<sp/>=<sp/>[[[UILocalNotification<sp/>alloc]<sp/>init]<sp/>autorelease];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(notif)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notif.repeatInterval<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notif.alertBody<sp/>=</highlight><highlight class="stringliteral">@&quot;New<sp/>incoming<sp/>call&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notif.alertAction<sp/>=<sp/></highlight><highlight class="stringliteral">@&quot;Answer&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>notif.soundName<sp/>=<sp/></highlight><highlight class="stringliteral">@&quot;oldphone-mono-30s.caf&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[UIApplication<sp/>sharedApplication]<sp/><sp/>presentLocalNotificationNow:notif];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
</programlisting> </para></listitem>
</itemizedlist>
<bold>Networking</bold> <linebreak/>
 <itemizedlist>
<listitem>
<para><bold>WWAN connection</bold> <linebreak/>
Liblinphone relies on iOS&apos;s standard BSD socket layer for sip/rtp networking. On IOS, WWAN connection is supposed to automatically bring up on any networking resquest issued by an application. At least on iPhone OS 3.x, BSD sockets do not implement this behavior. So it is recomended to add a special code to make sure the WWAN connection is properly setup. Pseudo code below describes a way to force WWAN connection by setting up a dummy TCP connection. <programlisting><codeline><highlight class="comment">/*start<sp/>a<sp/>new<sp/>thread<sp/>to<sp/>avoid<sp/>blocking<sp/>the<sp/>main<sp/>ui<sp/>in<sp/>case<sp/>of<sp/>peer<sp/>host<sp/>failure*/</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">[NSThread<sp/>detachNewThreadSelector:</highlight><highlight class="keyword">@selector</highlight><highlight class="normal">(runNetworkConnection)<sp/>toTarget:</highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>withObject:nil];</highlight></codeline>
<codeline><highlight class="normal">-(void)<sp/>runNetworkConnection<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFWriteStreamRef<sp/>writeStream;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>a<sp/>dummy<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFStreamCreatePairWithSocketToHost(NULL,<sp/>(CFStringRef)</highlight><highlight class="stringliteral">@&quot;192.168.0.200&quot;</highlight><highlight class="normal">,<sp/>15000,<sp/>nil,<sp/>&amp;writeStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFWriteStreamOpen<sp/>(writeStream);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buff=</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//try<sp/>to<sp/>write<sp/>on<sp/>this<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFWriteStreamWrite<sp/>(writeStream,(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UInt8*)buff,strlen(buff));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CFWriteStreamClose<sp/>(writeStream);</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
</programlisting> It is recommanded to perform this task each time the application is woken up, including keep alive handler. </para></listitem>
<listitem>
<para><bold>Managing IP connection state</bold> <linebreak/>
Liblinphone for IOS relies on the application to be informed of network connectivity changes. Network state changes when the IP connection moves from DOWN to UP, or from WIFI to WWAN. Applications using liblinphone must inform libliblinphone of this changes using function <ref refid="group__network__parameters_1ga50986600d8f528e083a2c8e6269734e3" kindref="member">linphone_core_set_network_reachable()</ref>. Usually this method is called from the IOS NetworkReachability callback. Here under a sample code: <programlisting><codeline><highlight class="comment">//typical<sp/>reachability<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>networkReachabilityCallBack(SCNetworkReachabilityRef<sp/>target,<sp/>SCNetworkReachabilityFlags<sp/>flags,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>info)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>==<sp/>0)<sp/>|<sp/>(flags<sp/>&amp;<sp/>(kSCNetworkReachabilityFlagsConnectionRequired<sp/>|kSCNetworkReachabilityFlagsConnectionOnTraffic)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//network<sp/>state<sp/>is<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__network__parameters_1ga50986600d8f528e083a2c8e6269734e3" kindref="member">linphone_core_set_network_reachable</ref>(lc,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((LinphoneManager*)info).connectivity<sp/>=<sp/>none;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Connectivity<sp/><sp/>newConnectivity<sp/>=<sp/>flags<sp/>&amp;<sp/>kSCNetworkReachabilityFlagsIsWWAN<sp/>?<sp/>wwan:wifi;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lLinphoneMgr.connectivity<sp/>==<sp/>none)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//notify<sp/>new<sp/>network<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__network__parameters_1ga50986600d8f528e083a2c8e6269734e3" kindref="member">linphone_core_set_network_reachable</ref>(lc,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lLinphoneMgr.connectivity<sp/>!=<sp/>newConnectivity)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connectivity<sp/>has<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__network__parameters_1ga50986600d8f528e083a2c8e6269734e3" kindref="member">linphone_core_set_network_reachable</ref>(lc,</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__network__parameters_1ga50986600d8f528e083a2c8e6269734e3" kindref="member">linphone_core_set_network_reachable</ref>(lc,</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//store<sp/>new<sp/>connectivity<sp/>status</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lLinphoneMgr.connectivity=newConnectivity;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para></listitem>
</itemizedlist>
<bold> Sound cards </bold> <linebreak/>
 Since IOS 5.0, liblinphone supports 2 sound cards. <emphasis>AU: Audio Unit Receiver</emphasis> based on IO units for voice calls plus <emphasis>AQ: Audio Queue Device</emphasis> dedicated to rings. Here under the recommended settings (I.E default one) <programlisting><codeline><highlight class="normal"><ref refid="group__media__parameters_1ga918921988d674e6709dbbf40c76fde2c" kindref="member">linphone_core_set_playback_device</ref>(lc,<sp/></highlight><highlight class="stringliteral">&quot;AU:<sp/>Audio<sp/>Unit<sp/>Receiver&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__media__parameters_1gaf39872ecc72222f20f21f43b1d801c7d" kindref="member">linphone_core_set_ringer_device</ref>(lc,<sp/></highlight><highlight class="stringliteral">&quot;AQ:<sp/>Audio<sp/>Queue<sp/>Device&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__media__parameters_1gabca57ab3569c2e4bc7811336be6ea989" kindref="member">linphone_core_set_capture_device</ref>(lc,<sp/></highlight><highlight class="stringliteral">&quot;AU:<sp/>Audio<sp/>Unit<sp/>Receiver&quot;</highlight><highlight class="normal">);</highlight></codeline>
</programlisting> <bold> GSM call interaction </bold> <linebreak/>
 To ensure gentle interaction with GSM calls, it is recommended to register an AudioSession delegate. This allows the application to be notified when its audio session is interrupted/resumed (presumably by a GSM call). <programlisting><codeline><highlight class="comment">//<sp/>declare<sp/>a<sp/>class<sp/>handling<sp/>the<sp/>AVAudioSessionDelegate<sp/>protocol</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">@interface<sp/></highlight><highlight class="normal">MyClass<sp/>:<sp/>NSObject<sp/>&lt;AVAudioSessionDelegate&gt;<sp/>{<sp/>[...]<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>implement<sp/>2<sp/>methods<sp/>:<sp/>here&apos;s<sp/>an<sp/>example<sp/>implementation</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">-(void)<sp/>beginInterruption<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__call__control_1gac0a4861d7c4702c64f7106f2b893c69e" kindref="member">LinphoneCall</ref>*<sp/>c<sp/>=<sp/><ref refid="group__call__control_1gac268a222347024ad7adb4eaf1fd27241" kindref="member">linphone_core_get_current_call</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ms_message(</highlight><highlight class="stringliteral">&quot;Sound<sp/>interruption<sp/>detected!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__call__control_1ga8cdae37a26ba7633067ea03bc43bd887" kindref="member">linphone_core_pause_call</ref>(theLinphoneCore,<sp/>c);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">-(void)<sp/>endInterruption<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ms_message(</highlight><highlight class="stringliteral">&quot;Sound<sp/>interruption<sp/>ended!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MSList*<sp/>c<sp/>=<sp/><ref refid="group__call__control_1gaf1f76b5a5d62e8bef5e1ad60e4f7b042" kindref="member">linphone_core_get_calls</ref>(theLinphoneCore);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ms_message(</highlight><highlight class="stringliteral">&quot;Auto<sp/>resuming<sp/>call&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__call__control_1ga3897c517486091f71e38986912bbecf5" kindref="member">linphone_core_resume_call</ref>(theLinphoneCore,<sp/>(<ref refid="group__call__control_1gac0a4861d7c4702c64f7106f2b893c69e" kindref="member">LinphoneCall</ref>*)<sp/>c-&gt;data);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ulink url="http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSessionDelegate_ProtocolReference/Reference/Reference.html">http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSessionDelegate_ProtocolReference/Reference/Reference.html</ulink></para></simplesect>
<linebreak/>
 Declare an instance of your class as AudioSession&apos;s delegate : <programlisting><codeline><highlight class="normal">[audioSession<sp/>setDelegate:myClassInstance];</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ulink url="http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSession_ClassReference/Reference/Reference.html">http://developer.apple.com/library/ios/#documentation/AVFoundation/Reference/AVAudioSession_ClassReference/Reference/Reference.html</ulink></para></simplesect>
<bold> Video </bold> <linebreak/>
Since 3.5 video support has been added to liblinphone for IOS. It requires the application to provide liblinphone with pointers to IOS&apos;s views hosting video display and video previous. <linebreak/>
 These 2 UIView objects must be passed to the core using functions <ref refid="group__media__parameters_1ga90d0abb20b5c4a93836c861e540f975c" kindref="member">linphone_core_set_native_video_window_id()</ref> and <ref refid="group__media__parameters_1ga61c95bf5b044388e0b1084a9424b6d59" kindref="member">linphone_core_set_native_preview_window_id()</ref>. here under speudo code: <programlisting><codeline><highlight class="normal">UIView*<sp/>display<sp/>=<sp/>[[UIView<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline><highlight class="normal">UIView*<sp/>preview<sp/>=<sp/>[[UIView<sp/>alloc]<sp/>init];</highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__media__parameters_1ga90d0abb20b5c4a93836c861e540f975c" kindref="member">linphone_core_set_native_video_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)display);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><ref refid="group__media__parameters_1ga61c95bf5b044388e0b1084a9424b6d59" kindref="member">linphone_core_set_native_preview_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)preview);</highlight></codeline>
</programlisting> <linebreak/>
 Screen rotations are also handled by liblinphone. 2 positions are currently supported, namely <emphasis>UIInterfaceOrientationPortrait</emphasis> and <emphasis>UIInterfaceOrientationLandscapeRight</emphasis>. Applications may invoke <ref refid="group__media__parameters_1ga309fdb0f39432b125ff1f36347cea362" kindref="member">linphone_core_set_device_rotation()</ref> followed by <ref refid="group__call__control_1ga1a7819d96573bb8dbcbf2a128145457e" kindref="member">linphone_core_update_call()</ref> to notify liblinphone of an orientation change. Here under a speudo code to handle orientation changes <programlisting><codeline><highlight class="normal">-(void)<sp/>configureOrientation:(UIInterfaceOrientation)<sp/>oritentation<sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldLinphoneOrientation<sp/>=<sp/><ref refid="group__media__parameters_1gae39b1bea4370f32c28fa446f97540d4f" kindref="member">linphone_core_get_device_rotation</ref>(lc);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oritentation<sp/>==<sp/>UIInterfaceOrientationPortrait<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga90d0abb20b5c4a93836c861e540f975c" kindref="member">linphone_core_set_native_video_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)display-portrait);<sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga61c95bf5b044388e0b1084a9424b6d59" kindref="member">linphone_core_set_native_preview_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)preview-portrait);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga309fdb0f39432b125ff1f36347cea362" kindref="member">linphone_core_set_device_rotation</ref>(lc,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(oritentation<sp/>==<sp/>UIInterfaceOrientationLandscapeRight<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga90d0abb20b5c4a93836c861e540f975c" kindref="member">linphone_core_set_native_video_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)display-landscape);<sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga61c95bf5b044388e0b1084a9424b6d59" kindref="member">linphone_core_set_native_preview_window_id</ref>(lc,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)preview-landscape);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__media__parameters_1ga309fdb0f39432b125ff1f36347cea362" kindref="member">linphone_core_set_device_rotation</ref>(lc,<sp/>270);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((oldLinphoneOrientation<sp/>!=<sp/><ref refid="group__media__parameters_1gae39b1bea4370f32c28fa446f97540d4f" kindref="member">linphone_core_get_device_rotation</ref>(lc))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><ref refid="group__call__control_1gac268a222347024ad7adb4eaf1fd27241" kindref="member">linphone_core_get_current_call</ref>(lc))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Orientation<sp/>has<sp/>changed,<sp/>must<sp/>call<sp/>update<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__call__control_1ga1a7819d96573bb8dbcbf2a128145457e" kindref="member">linphone_core_update_call</ref>(lc,<sp/><ref refid="group__call__control_1gac268a222347024ad7adb4eaf1fd27241" kindref="member">linphone_core_get_current_call</ref>(lc),<sp/>NULL);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><bold>DTMF feebacks</bold> <linebreak/>
Liblinphone provides functions <ref refid="group__media__parameters_1ga11b05c55741a236cb8d07b8a197ebcca" kindref="member">to play dtmf </ref> to the local user. Usually this is used to play a sound when the user presses a digit, inside or outside of any call. On IOS, libLinphone relies on AudioUnits for interfacing with the audio system. Unfortunately the Audio Unit initialization is a quite long operation that may trigger a bad user experience if performed each time a DTMF is played, the sound being delayed half a second after the press. To solve this issue and thus insure real-time precision, liblinphone introduces 2 functions for <ref refid="group__IOS_1gaef3c840b3c9f576c642b49cf306c7461" kindref="member">preloading </ref> and <ref refid="group__IOS_1gaef3c840b3c9f576c642b49cf306c7461" kindref="member">unloading </ref> the underlying audio graph responsible for playing DTMFs. <linebreak/>
 For an application using function <ref refid="group__media__parameters_1ga11b05c55741a236cb8d07b8a197ebcca" kindref="member">linphone_core_play_dtmf()</ref>, it is recommanded to call <ref refid="group__IOS_1gaef3c840b3c9f576c642b49cf306c7461" kindref="member">linphone_core_start_dtmf_stream()</ref> when entering in foreground and <ref refid="group__IOS_1gad0ecef2fb7a77c3363aa94edeadaf65b" kindref="member">linphone_core_stop_dtmf_stream()</ref> upon entering background mode. </para>    </detaileddescription>
  </compounddef>
</doxygen>
