/** \file
 *  This C header file was generated by $ANTLR version 3.2 Sep 23, 2009 12:02:23
 *
 *     -  From the grammar source file : /Users/karimjimo/Downloads/linphone-iphone/submodules/build/..//belle-sip/src/belle_sip_message.g
 *     -                            On : 2013-10-13 11:15:12
 *     -                for the parser : belle_sip_messageParserParser *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The parser belle_sip_messageParser has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pbelle_sip_messageParser, which is returned from a call to belle_sip_messageParserNew().
 *
 * The methods in pbelle_sip_messageParser are  as follows:
 *
 *  - belle_sip_message_t*      pbelle_sip_messageParser->message(pbelle_sip_messageParser)
 *  - belle_sip_message_t*      pbelle_sip_messageParser->message_raw(pbelle_sip_messageParser)
 *  - belle_sip_request_t*      pbelle_sip_messageParser->request(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->request_line(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sip_version(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->message_header(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_method_return      pbelle_sip_messageParser->method(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->extension_method(pbelle_sip_messageParser)
 *  - belle_sip_response_t*      pbelle_sip_messageParser->response(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->status_line(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_status_code_return      pbelle_sip_messageParser->status_code(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->extension_code(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_reason_phrase_return      pbelle_sip_messageParser->reason_phrase(pbelle_sip_messageParser)
 *  - belle_sip_param_pair_t*      pbelle_sip_messageParser->generic_param(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_gen_value_return      pbelle_sip_messageParser->gen_value(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_quoted_string_return      pbelle_sip_messageParser->quoted_string(pbelle_sip_messageParser)
 *  - belle_sip_header_allow_t*      pbelle_sip_messageParser->header_allow(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_methods_return      pbelle_sip_messageParser->methods(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->authorization_token(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->digest_token(pbelle_sip_messageParser)
 *  - belle_sip_header_authorization_t*      pbelle_sip_messageParser->header_authorization(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->credentials(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->digest_response(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->dig_resp(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->username_token(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->username(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_username_value_return      pbelle_sip_messageParser->username_value(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->uri_token(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->digest_uri(pbelle_sip_messageParser)
 *  - const char*      pbelle_sip_messageParser->message_qop(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_qop_value_return      pbelle_sip_messageParser->qop_value(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->cnonce(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_cnonce_value_return      pbelle_sip_messageParser->cnonce_value(pbelle_sip_messageParser)
 *  - const char*      pbelle_sip_messageParser->nonce_count(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_nc_value_return      pbelle_sip_messageParser->nc_value(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->dresponse(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_request_digest_return      pbelle_sip_messageParser->request_digest(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->huit_lhex(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->auth_param(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_auth_param_value_return      pbelle_sip_messageParser->auth_param_value(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_auth_param_name_return      pbelle_sip_messageParser->auth_param_name(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->other_response(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_auth_scheme_return      pbelle_sip_messageParser->auth_scheme(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_nonce_value_return      pbelle_sip_messageParser->nonce_value(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->call_id_token(pbelle_sip_messageParser)
 *  - belle_sip_header_call_id_t*      pbelle_sip_messageParser->header_call_id(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_call_id_return      pbelle_sip_messageParser->call_id(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->contact_token(pbelle_sip_messageParser)
 *  - belle_sip_header_contact_t*      pbelle_sip_messageParser->header_contact(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->contact_param(pbelle_sip_messageParser)
 *  - belle_sip_header_address_t*      pbelle_sip_messageParser->header_address(pbelle_sip_messageParser)
 *  - belle_sip_header_address_t*      pbelle_sip_messageParser->header_address_base(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->name_addr(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->addr_spec(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->paramless_addr_spec(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->display_name(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->contact_params(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->contact_extension(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_delta_seconds_return      pbelle_sip_messageParser->delta_seconds(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->content_length_token(pbelle_sip_messageParser)
 *  - belle_sip_header_content_length_t*      pbelle_sip_messageParser->header_content_length(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_content_length_return      pbelle_sip_messageParser->content_length(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->content_type_token(pbelle_sip_messageParser)
 *  - belle_sip_header_content_type_t*      pbelle_sip_messageParser->header_content_type(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->media_type(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_m_type_return      pbelle_sip_messageParser->m_type(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_m_subtype_return      pbelle_sip_messageParser->m_subtype(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->cseq_token(pbelle_sip_messageParser)
 *  - belle_sip_header_cseq_t*      pbelle_sip_messageParser->header_cseq(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_seq_number_return      pbelle_sip_messageParser->seq_number(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->date_token(pbelle_sip_messageParser)
 *  - belle_sip_header_date_t*      pbelle_sip_messageParser->header_date(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->date(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_sip_date_return      pbelle_sip_messageParser->sip_date(pbelle_sip_messageParser)
 *  - belle_sip_header_expires_t*      pbelle_sip_messageParser->header_expires(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->from_token(pbelle_sip_messageParser)
 *  - belle_sip_header_from_t*      pbelle_sip_messageParser->header_from(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->from_spec(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->from_param(pbelle_sip_messageParser)
 *  - belle_sip_header_max_forwards_t*      pbelle_sip_messageParser->header_max_forwards(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_max_forwards_return      pbelle_sip_messageParser->max_forwards(pbelle_sip_messageParser)
 *  - belle_sip_header_proxy_authenticate_t*      pbelle_sip_messageParser->header_proxy_authenticate(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->challenge(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->other_challenge(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->digest_cln(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->realm(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_realm_value_return      pbelle_sip_messageParser->realm_value(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->domain(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->nonce(pbelle_sip_messageParser)
 *  - char*      pbelle_sip_messageParser->opaque(pbelle_sip_messageParser)
 *  - const char*      pbelle_sip_messageParser->stale(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_stale_value_return      pbelle_sip_messageParser->stale_value(pbelle_sip_messageParser)
 *  - const char*      pbelle_sip_messageParser->algorithm(pbelle_sip_messageParser)
 *  - belle_sip_list_t*      pbelle_sip_messageParser->qop_opts(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->qop_opts_value(pbelle_sip_messageParser)
 *  - belle_sip_header_proxy_authorization_t*      pbelle_sip_messageParser->header_proxy_authorization(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->service_route_token(pbelle_sip_messageParser)
 *  - belle_sip_header_service_route_t*      pbelle_sip_messageParser->header_service_route(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->srv_route(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sr_param(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->record_route_token(pbelle_sip_messageParser)
 *  - belle_sip_header_record_route_t*      pbelle_sip_messageParser->header_record_route(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->rec_route(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->rr_param(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->comment(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->route_token(pbelle_sip_messageParser)
 *  - belle_sip_header_route_t*      pbelle_sip_messageParser->header_route(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->route_param(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->r_param(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->to_token(pbelle_sip_messageParser)
 *  - belle_sip_header_to_t*      pbelle_sip_messageParser->header_to(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->to_spec(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->to_param(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->refer_to_token(pbelle_sip_messageParser)
 *  - belle_sip_header_refer_to_t*      pbelle_sip_messageParser->header_refer_to(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->referred_by_token(pbelle_sip_messageParser)
 *  - belle_sip_header_referred_by_t*      pbelle_sip_messageParser->header_referred_by(pbelle_sip_messageParser)
 *  - belle_sip_header_address_t*      pbelle_sip_messageParser->refer_to_spec(pbelle_sip_messageParser)
 *  - belle_sip_header_user_agent_t*      pbelle_sip_messageParser->header_user_agent(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->server_val(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->serval_item(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->product(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->product_version(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->via_token(pbelle_sip_messageParser)
 *  - belle_sip_header_via_t*      pbelle_sip_messageParser->header_via(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->via_parm(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->via_params(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->via_received(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_via_address_return      pbelle_sip_messageParser->via_address(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_sent_protocol_return      pbelle_sip_messageParser->sent_protocol(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->protocol_name(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->protocol_version(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_transport_return      pbelle_sip_messageParser->transport(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->other_transport(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sent_by(pbelle_sip_messageParser)
 *  - belle_sip_header_www_authenticate_t*      pbelle_sip_messageParser->header_www_authenticate(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_state_value_return      pbelle_sip_messageParser->state_value(pbelle_sip_messageParser)
 *  - belle_sip_header_subscription_state_t*      pbelle_sip_messageParser->header_subscription_state(pbelle_sip_messageParser)
 *  - belle_sip_header_replaces_t*      pbelle_sip_messageParser->header_replaces(pbelle_sip_messageParser)
 *  - belle_sip_header_p_preferred_identity_t*      pbelle_sip_messageParser->header_p_preferred_identity(pbelle_sip_messageParser)
 *  - belle_sip_header_privacy_t*      pbelle_sip_messageParser->header_privacy(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->privacy_val(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_header_extension_return      pbelle_sip_messageParser->header_extension(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_header_name_return      pbelle_sip_messageParser->header_name(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_header_value_return      pbelle_sip_messageParser->header_value(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->message_body(pbelle_sip_messageParser)
 *  - belle_sip_uri_t*      pbelle_sip_messageParser->paramless_uri(pbelle_sip_messageParser)
 *  - belle_sip_uri_t*      pbelle_sip_messageParser->uri(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sip_token(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sips_token(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sip_schema(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->userinfo(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_user_return      pbelle_sip_messageParser->user(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->user_unreserved(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->password(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hostport(pbelle_sip_messageParser)
 *  - const char*      pbelle_sip_messageParser->host(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_hostname_return      pbelle_sip_messageParser->hostname(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->domainlabel(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->toplabel(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_ipv4address_return      pbelle_sip_messageParser->ipv4address(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->ipv6reference(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_ipv6address_return      pbelle_sip_messageParser->ipv6address(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hexpart(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hexseq(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hex4(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_port_return      pbelle_sip_messageParser->port(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->uri_parameters(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->uri_parameter(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->other_param(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_pname_return      pbelle_sip_messageParser->pname(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_pvalue_return      pbelle_sip_messageParser->pvalue(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->paramchar(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->param_unreserved(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->headers(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->header(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_hname_return      pbelle_sip_messageParser->hname(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_hvalue_return      pbelle_sip_messageParser->hvalue(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hnv_unreserved(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->escaped(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->ttl(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->three_digit(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_token_return      pbelle_sip_messageParser->token(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->reserved(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->unreserved(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->alphanum(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hexdigit(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->alpha(pbelle_sip_messageParser)
 *  - belle_sip_messageParser_word_return      pbelle_sip_messageParser->word(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->mark(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->hcolon(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->ldquot(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->rdquot(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->semi(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->comma(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sp_laquot_sp(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->sp_raquot_sp(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->equal(pbelle_sip_messageParser)
 *  - void      pbelle_sip_messageParser->slash(pbelle_sip_messageParser)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_belle_sip_messageParser_H
#define _belle_sip_messageParser_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#include "belle-sip/belle-sip.h"
#include "belle_sip_internal.h"

 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct belle_sip_messageParser_Ctx_struct belle_sip_messageParser, * pbelle_sip_messageParser;



/*
    belle-sip - SIP (RFC3261) library.
    Copyright (C) 2010  Belledonne Communications SARL

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */
typedef struct belle_sip_messageParser_method_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_method_return;

typedef struct belle_sip_messageParser_status_code_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_status_code_return;

typedef struct belle_sip_messageParser_reason_phrase_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_reason_phrase_return;

typedef struct belle_sip_messageParser_gen_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_gen_value_return;

typedef struct belle_sip_messageParser_quoted_string_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_quoted_string_return;

typedef struct belle_sip_messageParser_methods_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_methods_return;

typedef struct belle_sip_messageParser_username_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_username_value_return;

typedef struct belle_sip_messageParser_qop_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_qop_value_return;

typedef struct belle_sip_messageParser_cnonce_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_cnonce_value_return;

typedef struct belle_sip_messageParser_nc_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_nc_value_return;

typedef struct belle_sip_messageParser_request_digest_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_request_digest_return;

typedef struct belle_sip_messageParser_auth_param_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_auth_param_value_return;

typedef struct belle_sip_messageParser_auth_param_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_auth_param_name_return;

typedef struct belle_sip_messageParser_auth_scheme_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_auth_scheme_return;

typedef struct belle_sip_messageParser_nonce_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_nonce_value_return;

typedef struct belle_sip_messageParser_call_id_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_call_id_return;

typedef struct belle_sip_messageParser_delta_seconds_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_delta_seconds_return;

typedef struct belle_sip_messageParser_content_length_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_content_length_return;

typedef struct belle_sip_messageParser_m_type_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_m_type_return;

typedef struct belle_sip_messageParser_m_subtype_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_m_subtype_return;

typedef struct belle_sip_messageParser_seq_number_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_seq_number_return;

typedef struct belle_sip_messageParser_sip_date_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_sip_date_return;

typedef struct belle_sip_messageParser_max_forwards_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_max_forwards_return;

typedef struct belle_sip_messageParser_realm_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_realm_value_return;

typedef struct belle_sip_messageParser_stale_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_stale_value_return;

typedef struct belle_sip_messageParser_via_address_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_via_address_return;

typedef struct belle_sip_messageParser_sent_protocol_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_sent_protocol_return;

typedef struct belle_sip_messageParser_transport_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_transport_return;

typedef struct belle_sip_messageParser_state_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_state_value_return;

typedef struct belle_sip_messageParser_header_extension_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
    belle_sip_header_t* ret;
}
    belle_sip_messageParser_header_extension_return;

typedef struct belle_sip_messageParser_header_name_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_header_name_return;

typedef struct belle_sip_messageParser_header_value_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_header_value_return;

typedef struct belle_sip_messageParser_user_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_user_return;

typedef struct belle_sip_messageParser_hostname_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_hostname_return;

typedef struct belle_sip_messageParser_ipv4address_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_ipv4address_return;

typedef struct belle_sip_messageParser_ipv6address_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_ipv6address_return;

typedef struct belle_sip_messageParser_port_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
    int ret;
}
    belle_sip_messageParser_port_return;

typedef struct belle_sip_messageParser_pname_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_pname_return;

typedef struct belle_sip_messageParser_pvalue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_pvalue_return;

typedef struct belle_sip_messageParser_hname_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_hname_return;

typedef struct belle_sip_messageParser_hvalue_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_hvalue_return;

typedef struct belle_sip_messageParser_token_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_token_return;

typedef struct belle_sip_messageParser_word_return_struct
{
    /** Generic return elements for ANTLR3 rules that are not in tree parsers or returning trees
     */
    pANTLR3_COMMON_TOKEN    start;
    pANTLR3_COMMON_TOKEN    stop;   
}
    belle_sip_messageParser_word_return;



/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the message scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_messagePush().
 */
typedef struct  belle_sip_messageParser_message_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_message_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    size_t message_length;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_message_SCOPE, * pbelle_sip_messageParser_message_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the message_raw scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_message_rawPush().
 */
typedef struct  belle_sip_messageParser_message_raw_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_message_raw_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    size_t* message_length;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_message_raw_SCOPE, * pbelle_sip_messageParser_message_raw_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the request scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_requestPush().
 */
typedef struct  belle_sip_messageParser_request_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_request_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_request_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_request_SCOPE, * pbelle_sip_messageParser_request_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the response scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_responsePush().
 */
typedef struct  belle_sip_messageParser_response_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_response_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_response_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_response_SCOPE, * pbelle_sip_messageParser_response_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the generic_param scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_generic_paramPush().
 */
typedef struct  belle_sip_messageParser_generic_param_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_generic_param_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    int is_value;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_generic_param_SCOPE, * pbelle_sip_messageParser_generic_param_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_allow scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_allowPush().
 */
typedef struct  belle_sip_messageParser_header_allow_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_allow_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_allow_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_allow_SCOPE, * pbelle_sip_messageParser_header_allow_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_authorization scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_authorizationPush().
 */
typedef struct  belle_sip_messageParser_header_authorization_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_authorization_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_authorization_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_authorization_SCOPE, * pbelle_sip_messageParser_header_authorization_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_call_id scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_call_idPush().
 */
typedef struct  belle_sip_messageParser_header_call_id_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_call_id_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_call_id_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_call_id_SCOPE, * pbelle_sip_messageParser_header_call_id_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_contact scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_contactPush().
 */
typedef struct  belle_sip_messageParser_header_contact_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_contact_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_contact_t* current;
    belle_sip_header_contact_t* first;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_contact_SCOPE, * pbelle_sip_messageParser_header_contact_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the contact_param scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_contact_paramPush().
 */
typedef struct  belle_sip_messageParser_contact_param_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_contact_param_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_contact_t* prev;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_contact_param_SCOPE, * pbelle_sip_messageParser_contact_param_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_content_length scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_content_lengthPush().
 */
typedef struct  belle_sip_messageParser_header_content_length_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_content_length_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_content_length_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_content_length_SCOPE, * pbelle_sip_messageParser_header_content_length_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_content_type scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_content_typePush().
 */
typedef struct  belle_sip_messageParser_header_content_type_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_content_type_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_content_type_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_content_type_SCOPE, * pbelle_sip_messageParser_header_content_type_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_cseq scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_cseqPush().
 */
typedef struct  belle_sip_messageParser_header_cseq_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_cseq_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_cseq_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_cseq_SCOPE, * pbelle_sip_messageParser_header_cseq_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_date scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_datePush().
 */
typedef struct  belle_sip_messageParser_header_date_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_date_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_date_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_date_SCOPE, * pbelle_sip_messageParser_header_date_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_expires scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_expiresPush().
 */
typedef struct  belle_sip_messageParser_header_expires_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_expires_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_expires_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_expires_SCOPE, * pbelle_sip_messageParser_header_expires_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_from scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_fromPush().
 */
typedef struct  belle_sip_messageParser_header_from_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_from_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_from_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_from_SCOPE, * pbelle_sip_messageParser_header_from_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_max_forwards scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_max_forwardsPush().
 */
typedef struct  belle_sip_messageParser_header_max_forwards_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_max_forwards_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_max_forwards_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_max_forwards_SCOPE, * pbelle_sip_messageParser_header_max_forwards_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_proxy_authenticate scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_proxy_authenticatePush().
 */
typedef struct  belle_sip_messageParser_header_proxy_authenticate_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_proxy_authenticate_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_proxy_authenticate_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_proxy_authenticate_SCOPE, * pbelle_sip_messageParser_header_proxy_authenticate_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the qop_opts scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_qop_optsPush().
 */
typedef struct  belle_sip_messageParser_qop_opts_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_qop_opts_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_list_t* list;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_qop_opts_SCOPE, * pbelle_sip_messageParser_qop_opts_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_proxy_authorization scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_proxy_authorizationPush().
 */
typedef struct  belle_sip_messageParser_header_proxy_authorization_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_proxy_authorization_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_proxy_authorization_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_proxy_authorization_SCOPE, * pbelle_sip_messageParser_header_proxy_authorization_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_service_route scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_service_routePush().
 */
typedef struct  belle_sip_messageParser_header_service_route_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_service_route_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_service_route_t* current;
    belle_sip_header_service_route_t* first;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_service_route_SCOPE, * pbelle_sip_messageParser_header_service_route_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the srv_route scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_srv_routePush().
 */
typedef struct  belle_sip_messageParser_srv_route_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_srv_route_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_service_route_t* prev;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_srv_route_SCOPE, * pbelle_sip_messageParser_srv_route_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_record_route scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_record_routePush().
 */
typedef struct  belle_sip_messageParser_header_record_route_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_record_route_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_record_route_t* current;
    belle_sip_header_record_route_t* first;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_record_route_SCOPE, * pbelle_sip_messageParser_header_record_route_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the rec_route scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_rec_routePush().
 */
typedef struct  belle_sip_messageParser_rec_route_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_rec_route_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_record_route_t* prev;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_rec_route_SCOPE, * pbelle_sip_messageParser_rec_route_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_route scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_routePush().
 */
typedef struct  belle_sip_messageParser_header_route_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_route_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_route_t* current;
    belle_sip_header_route_t* first;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_route_SCOPE, * pbelle_sip_messageParser_header_route_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the route_param scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_route_paramPush().
 */
typedef struct  belle_sip_messageParser_route_param_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_route_param_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_route_t* prev;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_route_param_SCOPE, * pbelle_sip_messageParser_route_param_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_to scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_toPush().
 */
typedef struct  belle_sip_messageParser_header_to_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_to_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_to_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_to_SCOPE, * pbelle_sip_messageParser_header_to_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_user_agent scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_user_agentPush().
 */
typedef struct  belle_sip_messageParser_header_user_agent_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_user_agent_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_user_agent_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_user_agent_SCOPE, * pbelle_sip_messageParser_header_user_agent_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_via scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_viaPush().
 */
typedef struct  belle_sip_messageParser_header_via_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_via_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_via_t* current;
    belle_sip_header_via_t* first;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_via_SCOPE, * pbelle_sip_messageParser_header_via_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the via_parm scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_via_parmPush().
 */
typedef struct  belle_sip_messageParser_via_parm_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_via_parm_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_via_t* prev;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_via_parm_SCOPE, * pbelle_sip_messageParser_via_parm_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_www_authenticate scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_www_authenticatePush().
 */
typedef struct  belle_sip_messageParser_header_www_authenticate_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_www_authenticate_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_www_authenticate_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_www_authenticate_SCOPE, * pbelle_sip_messageParser_header_www_authenticate_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_subscription_state scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_subscription_statePush().
 */
typedef struct  belle_sip_messageParser_header_subscription_state_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_subscription_state_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_subscription_state_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_subscription_state_SCOPE, * pbelle_sip_messageParser_header_subscription_state_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_replaces scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_replacesPush().
 */
typedef struct  belle_sip_messageParser_header_replaces_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_replaces_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_replaces_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_replaces_SCOPE, * pbelle_sip_messageParser_header_replaces_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the header_privacy scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_header_privacyPush().
 */
typedef struct  belle_sip_messageParser_header_privacy_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_header_privacy_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_header_privacy_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_header_privacy_SCOPE, * pbelle_sip_messageParser_header_privacy_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the paramless_uri scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_paramless_uriPush().
 */
typedef struct  belle_sip_messageParser_paramless_uri_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_paramless_uri_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_paramless_uri_SCOPE, * pbelle_sip_messageParser_paramless_uri_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the uri scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_uriPush().
 */
typedef struct  belle_sip_messageParser_uri_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_uri_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_uri_SCOPE, * pbelle_sip_messageParser_uri_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the userinfo scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_userinfoPush().
 */
typedef struct  belle_sip_messageParser_userinfo_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_userinfo_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_userinfo_SCOPE, * pbelle_sip_messageParser_userinfo_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the hostport scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_hostportPush().
 */
typedef struct  belle_sip_messageParser_hostport_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_hostport_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_hostport_SCOPE, * pbelle_sip_messageParser_hostport_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the host scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_hostPush().
 */
typedef struct  belle_sip_messageParser_host_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_host_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    const char* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_host_SCOPE, * pbelle_sip_messageParser_host_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the uri_parameters scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_uri_parametersPush().
 */
typedef struct  belle_sip_messageParser_uri_parameters_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_uri_parameters_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_uri_parameters_SCOPE, * pbelle_sip_messageParser_uri_parameters_SCOPE;
/* ruleAttributeScopeDecl(scope)
 */
/* makeScopeSet() 
 */
 /** Definition of the headers scope variable tracking
 *  structure. An instance of this structure is created by calling
 *  belle_sip_messageParser_headersPush().
 */
typedef struct  belle_sip_messageParser_headers_SCOPE_struct
{
    /** Function that the user may provide to be called when the
     *  scope is destroyed (so you can free pANTLR3_HASH_TABLES and so on)
     *
     * \param POinter to an instance of this typedef/struct
     */
    void    (ANTLR3_CDECL *free)	(struct belle_sip_messageParser_headers_SCOPE_struct * frame);
    
    /* =============================================================================
     * Programmer defined variables...
     */
    belle_sip_uri_t* current;

    /* End of programmer defined variables
     * =============================================================================
     */
} 
    belle_sip_messageParser_headers_SCOPE, * pbelle_sip_messageParser_headers_SCOPE;

/** Context tracking structure for belle_sip_messageParser
 */
struct belle_sip_messageParser_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_PARSER   pParser;

    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  message stack for use by pbelle_sip_messageParser_messagePush()
     *  and pbelle_sip_messageParser_messagePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_messageStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_messageStack_limit;
    pbelle_sip_messageParser_message_SCOPE   (*pbelle_sip_messageParser_messagePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_message_SCOPE   pbelle_sip_messageParser_messageTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  message_raw stack for use by pbelle_sip_messageParser_message_rawPush()
     *  and pbelle_sip_messageParser_message_rawPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_message_rawStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_message_rawStack_limit;
    pbelle_sip_messageParser_message_raw_SCOPE   (*pbelle_sip_messageParser_message_rawPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_message_raw_SCOPE   pbelle_sip_messageParser_message_rawTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  request stack for use by pbelle_sip_messageParser_requestPush()
     *  and pbelle_sip_messageParser_requestPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_requestStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_requestStack_limit;
    pbelle_sip_messageParser_request_SCOPE   (*pbelle_sip_messageParser_requestPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_request_SCOPE   pbelle_sip_messageParser_requestTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  response stack for use by pbelle_sip_messageParser_responsePush()
     *  and pbelle_sip_messageParser_responsePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_responseStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_responseStack_limit;
    pbelle_sip_messageParser_response_SCOPE   (*pbelle_sip_messageParser_responsePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_response_SCOPE   pbelle_sip_messageParser_responseTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  generic_param stack for use by pbelle_sip_messageParser_generic_paramPush()
     *  and pbelle_sip_messageParser_generic_paramPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_generic_paramStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_generic_paramStack_limit;
    pbelle_sip_messageParser_generic_param_SCOPE   (*pbelle_sip_messageParser_generic_paramPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_generic_param_SCOPE   pbelle_sip_messageParser_generic_paramTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_allow stack for use by pbelle_sip_messageParser_header_allowPush()
     *  and pbelle_sip_messageParser_header_allowPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_allowStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_allowStack_limit;
    pbelle_sip_messageParser_header_allow_SCOPE   (*pbelle_sip_messageParser_header_allowPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_allow_SCOPE   pbelle_sip_messageParser_header_allowTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_authorization stack for use by pbelle_sip_messageParser_header_authorizationPush()
     *  and pbelle_sip_messageParser_header_authorizationPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_authorizationStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_authorizationStack_limit;
    pbelle_sip_messageParser_header_authorization_SCOPE   (*pbelle_sip_messageParser_header_authorizationPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_authorization_SCOPE   pbelle_sip_messageParser_header_authorizationTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_call_id stack for use by pbelle_sip_messageParser_header_call_idPush()
     *  and pbelle_sip_messageParser_header_call_idPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_call_idStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_call_idStack_limit;
    pbelle_sip_messageParser_header_call_id_SCOPE   (*pbelle_sip_messageParser_header_call_idPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_call_id_SCOPE   pbelle_sip_messageParser_header_call_idTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_contact stack for use by pbelle_sip_messageParser_header_contactPush()
     *  and pbelle_sip_messageParser_header_contactPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_contactStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_contactStack_limit;
    pbelle_sip_messageParser_header_contact_SCOPE   (*pbelle_sip_messageParser_header_contactPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_contact_SCOPE   pbelle_sip_messageParser_header_contactTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  contact_param stack for use by pbelle_sip_messageParser_contact_paramPush()
     *  and pbelle_sip_messageParser_contact_paramPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_contact_paramStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_contact_paramStack_limit;
    pbelle_sip_messageParser_contact_param_SCOPE   (*pbelle_sip_messageParser_contact_paramPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_contact_param_SCOPE   pbelle_sip_messageParser_contact_paramTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_content_length stack for use by pbelle_sip_messageParser_header_content_lengthPush()
     *  and pbelle_sip_messageParser_header_content_lengthPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_content_lengthStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_content_lengthStack_limit;
    pbelle_sip_messageParser_header_content_length_SCOPE   (*pbelle_sip_messageParser_header_content_lengthPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_content_length_SCOPE   pbelle_sip_messageParser_header_content_lengthTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_content_type stack for use by pbelle_sip_messageParser_header_content_typePush()
     *  and pbelle_sip_messageParser_header_content_typePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_content_typeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_content_typeStack_limit;
    pbelle_sip_messageParser_header_content_type_SCOPE   (*pbelle_sip_messageParser_header_content_typePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_content_type_SCOPE   pbelle_sip_messageParser_header_content_typeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_cseq stack for use by pbelle_sip_messageParser_header_cseqPush()
     *  and pbelle_sip_messageParser_header_cseqPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_cseqStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_cseqStack_limit;
    pbelle_sip_messageParser_header_cseq_SCOPE   (*pbelle_sip_messageParser_header_cseqPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_cseq_SCOPE   pbelle_sip_messageParser_header_cseqTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_date stack for use by pbelle_sip_messageParser_header_datePush()
     *  and pbelle_sip_messageParser_header_datePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_dateStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_dateStack_limit;
    pbelle_sip_messageParser_header_date_SCOPE   (*pbelle_sip_messageParser_header_datePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_date_SCOPE   pbelle_sip_messageParser_header_dateTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_expires stack for use by pbelle_sip_messageParser_header_expiresPush()
     *  and pbelle_sip_messageParser_header_expiresPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_expiresStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_expiresStack_limit;
    pbelle_sip_messageParser_header_expires_SCOPE   (*pbelle_sip_messageParser_header_expiresPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_expires_SCOPE   pbelle_sip_messageParser_header_expiresTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_from stack for use by pbelle_sip_messageParser_header_fromPush()
     *  and pbelle_sip_messageParser_header_fromPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_fromStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_fromStack_limit;
    pbelle_sip_messageParser_header_from_SCOPE   (*pbelle_sip_messageParser_header_fromPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_from_SCOPE   pbelle_sip_messageParser_header_fromTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_max_forwards stack for use by pbelle_sip_messageParser_header_max_forwardsPush()
     *  and pbelle_sip_messageParser_header_max_forwardsPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_max_forwardsStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_max_forwardsStack_limit;
    pbelle_sip_messageParser_header_max_forwards_SCOPE   (*pbelle_sip_messageParser_header_max_forwardsPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_max_forwards_SCOPE   pbelle_sip_messageParser_header_max_forwardsTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_proxy_authenticate stack for use by pbelle_sip_messageParser_header_proxy_authenticatePush()
     *  and pbelle_sip_messageParser_header_proxy_authenticatePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_proxy_authenticateStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_proxy_authenticateStack_limit;
    pbelle_sip_messageParser_header_proxy_authenticate_SCOPE   (*pbelle_sip_messageParser_header_proxy_authenticatePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_proxy_authenticate_SCOPE   pbelle_sip_messageParser_header_proxy_authenticateTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  qop_opts stack for use by pbelle_sip_messageParser_qop_optsPush()
     *  and pbelle_sip_messageParser_qop_optsPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_qop_optsStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_qop_optsStack_limit;
    pbelle_sip_messageParser_qop_opts_SCOPE   (*pbelle_sip_messageParser_qop_optsPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_qop_opts_SCOPE   pbelle_sip_messageParser_qop_optsTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_proxy_authorization stack for use by pbelle_sip_messageParser_header_proxy_authorizationPush()
     *  and pbelle_sip_messageParser_header_proxy_authorizationPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_proxy_authorizationStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_proxy_authorizationStack_limit;
    pbelle_sip_messageParser_header_proxy_authorization_SCOPE   (*pbelle_sip_messageParser_header_proxy_authorizationPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_proxy_authorization_SCOPE   pbelle_sip_messageParser_header_proxy_authorizationTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_service_route stack for use by pbelle_sip_messageParser_header_service_routePush()
     *  and pbelle_sip_messageParser_header_service_routePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_service_routeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_service_routeStack_limit;
    pbelle_sip_messageParser_header_service_route_SCOPE   (*pbelle_sip_messageParser_header_service_routePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_service_route_SCOPE   pbelle_sip_messageParser_header_service_routeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  srv_route stack for use by pbelle_sip_messageParser_srv_routePush()
     *  and pbelle_sip_messageParser_srv_routePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_srv_routeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_srv_routeStack_limit;
    pbelle_sip_messageParser_srv_route_SCOPE   (*pbelle_sip_messageParser_srv_routePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_srv_route_SCOPE   pbelle_sip_messageParser_srv_routeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_record_route stack for use by pbelle_sip_messageParser_header_record_routePush()
     *  and pbelle_sip_messageParser_header_record_routePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_record_routeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_record_routeStack_limit;
    pbelle_sip_messageParser_header_record_route_SCOPE   (*pbelle_sip_messageParser_header_record_routePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_record_route_SCOPE   pbelle_sip_messageParser_header_record_routeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  rec_route stack for use by pbelle_sip_messageParser_rec_routePush()
     *  and pbelle_sip_messageParser_rec_routePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_rec_routeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_rec_routeStack_limit;
    pbelle_sip_messageParser_rec_route_SCOPE   (*pbelle_sip_messageParser_rec_routePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_rec_route_SCOPE   pbelle_sip_messageParser_rec_routeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_route stack for use by pbelle_sip_messageParser_header_routePush()
     *  and pbelle_sip_messageParser_header_routePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_routeStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_routeStack_limit;
    pbelle_sip_messageParser_header_route_SCOPE   (*pbelle_sip_messageParser_header_routePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_route_SCOPE   pbelle_sip_messageParser_header_routeTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  route_param stack for use by pbelle_sip_messageParser_route_paramPush()
     *  and pbelle_sip_messageParser_route_paramPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_route_paramStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_route_paramStack_limit;
    pbelle_sip_messageParser_route_param_SCOPE   (*pbelle_sip_messageParser_route_paramPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_route_param_SCOPE   pbelle_sip_messageParser_route_paramTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_to stack for use by pbelle_sip_messageParser_header_toPush()
     *  and pbelle_sip_messageParser_header_toPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_toStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_toStack_limit;
    pbelle_sip_messageParser_header_to_SCOPE   (*pbelle_sip_messageParser_header_toPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_to_SCOPE   pbelle_sip_messageParser_header_toTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_user_agent stack for use by pbelle_sip_messageParser_header_user_agentPush()
     *  and pbelle_sip_messageParser_header_user_agentPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_user_agentStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_user_agentStack_limit;
    pbelle_sip_messageParser_header_user_agent_SCOPE   (*pbelle_sip_messageParser_header_user_agentPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_user_agent_SCOPE   pbelle_sip_messageParser_header_user_agentTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_via stack for use by pbelle_sip_messageParser_header_viaPush()
     *  and pbelle_sip_messageParser_header_viaPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_viaStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_viaStack_limit;
    pbelle_sip_messageParser_header_via_SCOPE   (*pbelle_sip_messageParser_header_viaPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_via_SCOPE   pbelle_sip_messageParser_header_viaTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  via_parm stack for use by pbelle_sip_messageParser_via_parmPush()
     *  and pbelle_sip_messageParser_via_parmPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_via_parmStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_via_parmStack_limit;
    pbelle_sip_messageParser_via_parm_SCOPE   (*pbelle_sip_messageParser_via_parmPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_via_parm_SCOPE   pbelle_sip_messageParser_via_parmTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_www_authenticate stack for use by pbelle_sip_messageParser_header_www_authenticatePush()
     *  and pbelle_sip_messageParser_header_www_authenticatePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_www_authenticateStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_www_authenticateStack_limit;
    pbelle_sip_messageParser_header_www_authenticate_SCOPE   (*pbelle_sip_messageParser_header_www_authenticatePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_www_authenticate_SCOPE   pbelle_sip_messageParser_header_www_authenticateTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_subscription_state stack for use by pbelle_sip_messageParser_header_subscription_statePush()
     *  and pbelle_sip_messageParser_header_subscription_statePop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_subscription_stateStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_subscription_stateStack_limit;
    pbelle_sip_messageParser_header_subscription_state_SCOPE   (*pbelle_sip_messageParser_header_subscription_statePush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_subscription_state_SCOPE   pbelle_sip_messageParser_header_subscription_stateTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_replaces stack for use by pbelle_sip_messageParser_header_replacesPush()
     *  and pbelle_sip_messageParser_header_replacesPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_replacesStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_replacesStack_limit;
    pbelle_sip_messageParser_header_replaces_SCOPE   (*pbelle_sip_messageParser_header_replacesPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_replaces_SCOPE   pbelle_sip_messageParser_header_replacesTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  header_privacy stack for use by pbelle_sip_messageParser_header_privacyPush()
     *  and pbelle_sip_messageParser_header_privacyPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_header_privacyStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_header_privacyStack_limit;
    pbelle_sip_messageParser_header_privacy_SCOPE   (*pbelle_sip_messageParser_header_privacyPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_header_privacy_SCOPE   pbelle_sip_messageParser_header_privacyTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  paramless_uri stack for use by pbelle_sip_messageParser_paramless_uriPush()
     *  and pbelle_sip_messageParser_paramless_uriPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_paramless_uriStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_paramless_uriStack_limit;
    pbelle_sip_messageParser_paramless_uri_SCOPE   (*pbelle_sip_messageParser_paramless_uriPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_paramless_uri_SCOPE   pbelle_sip_messageParser_paramless_uriTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  uri stack for use by pbelle_sip_messageParser_uriPush()
     *  and pbelle_sip_messageParser_uriPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_uriStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_uriStack_limit;
    pbelle_sip_messageParser_uri_SCOPE   (*pbelle_sip_messageParser_uriPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_uri_SCOPE   pbelle_sip_messageParser_uriTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  userinfo stack for use by pbelle_sip_messageParser_userinfoPush()
     *  and pbelle_sip_messageParser_userinfoPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_userinfoStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_userinfoStack_limit;
    pbelle_sip_messageParser_userinfo_SCOPE   (*pbelle_sip_messageParser_userinfoPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_userinfo_SCOPE   pbelle_sip_messageParser_userinfoTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  hostport stack for use by pbelle_sip_messageParser_hostportPush()
     *  and pbelle_sip_messageParser_hostportPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_hostportStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_hostportStack_limit;
    pbelle_sip_messageParser_hostport_SCOPE   (*pbelle_sip_messageParser_hostportPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_hostport_SCOPE   pbelle_sip_messageParser_hostportTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  host stack for use by pbelle_sip_messageParser_hostPush()
     *  and pbelle_sip_messageParser_hostPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_hostStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_hostStack_limit;
    pbelle_sip_messageParser_host_SCOPE   (*pbelle_sip_messageParser_hostPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_host_SCOPE   pbelle_sip_messageParser_hostTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  uri_parameters stack for use by pbelle_sip_messageParser_uri_parametersPush()
     *  and pbelle_sip_messageParser_uri_parametersPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_uri_parametersStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_uri_parametersStack_limit;
    pbelle_sip_messageParser_uri_parameters_SCOPE   (*pbelle_sip_messageParser_uri_parametersPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_uri_parameters_SCOPE   pbelle_sip_messageParser_uri_parametersTop;
    /* ruleAttributeScopeDef(scope)
     */
    /** Pointer to the  headers stack for use by pbelle_sip_messageParser_headersPush()
     *  and pbelle_sip_messageParser_headersPop()
     */
    pANTLR3_STACK pbelle_sip_messageParser_headersStack;
    ANTLR3_UINT32 pbelle_sip_messageParser_headersStack_limit;
    pbelle_sip_messageParser_headers_SCOPE   (*pbelle_sip_messageParser_headersPush)(struct belle_sip_messageParser_Ctx_struct * ctx);
    pbelle_sip_messageParser_headers_SCOPE   pbelle_sip_messageParser_headersTop;


     belle_sip_message_t* (*message)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_message_t* (*message_raw)	(struct belle_sip_messageParser_Ctx_struct * ctx, size_t* length);
     belle_sip_request_t* (*request)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*request_line)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sip_version)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*message_header)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_message_t* message);
     belle_sip_messageParser_method_return (*method)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*extension_method)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_response_t* (*response)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*status_line)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_status_code_return (*status_code)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*extension_code)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_reason_phrase_return (*reason_phrase)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_param_pair_t* (*generic_param)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_parameters_t* object);
     belle_sip_messageParser_gen_value_return (*gen_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_quoted_string_return (*quoted_string)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_allow_t* (*header_allow)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_methods_return (*methods)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*authorization_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*digest_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_authorization_t* (*header_authorization)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*credentials)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     void (*digest_response)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     void (*dig_resp)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     void (*username_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*username)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_username_value_return (*username_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*uri_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*digest_uri)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     const char* (*message_qop)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_qop_value_return (*qop_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*cnonce)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_cnonce_value_return (*cnonce_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     const char* (*nonce_count)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_nc_value_return (*nc_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*dresponse)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_request_digest_return (*request_digest)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*huit_lhex)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*auth_param)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     belle_sip_messageParser_auth_param_value_return (*auth_param_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_auth_param_name_return (*auth_param_name)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*other_response)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_authorization_t* header_authorization_base);
     belle_sip_messageParser_auth_scheme_return (*auth_scheme)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_nonce_value_return (*nonce_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*call_id_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_call_id_t* (*header_call_id)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_call_id_return (*call_id)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*contact_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_contact_t* (*header_contact)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*contact_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_address_t* (*header_address)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_address_t* (*header_address_base)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* obj);
     void (*name_addr)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* object);
     void (*addr_spec)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* object);
     void (*paramless_addr_spec)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* object);
     void (*display_name)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* object);
     void (*contact_params)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*contact_extension)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_delta_seconds_return (*delta_seconds)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*content_length_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_content_length_t* (*header_content_length)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_content_length_return (*content_length)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*content_type_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_content_type_t* (*header_content_type)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*media_type)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_m_type_return (*m_type)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_m_subtype_return (*m_subtype)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*cseq_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_cseq_t* (*header_cseq)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_seq_number_return (*seq_number)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*date_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_date_t* (*header_date)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*date)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_sip_date_return (*sip_date)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_expires_t* (*header_expires)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*from_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_from_t* (*header_from)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*from_spec)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*from_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_max_forwards_t* (*header_max_forwards)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_max_forwards_return (*max_forwards)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_proxy_authenticate_t* (*header_proxy_authenticate)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*challenge)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_www_authenticate_t* www_authenticate);
     void (*other_challenge)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_www_authenticate_t* www_authenticate);
     void (*digest_cln)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_www_authenticate_t* www_authenticate);
     char* (*realm)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_realm_value_return (*realm_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*domain)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*nonce)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     char* (*opaque)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     const char* (*stale)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_stale_value_return (*stale_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     const char* (*algorithm)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_list_t* (*qop_opts)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*qop_opts_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_proxy_authorization_t* (*header_proxy_authorization)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*service_route_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_service_route_t* (*header_service_route)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*srv_route)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sr_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*record_route_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_record_route_t* (*header_record_route)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*rec_route)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*rr_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*comment)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*route_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_route_t* (*header_route)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*route_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*r_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*to_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_to_t* (*header_to)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*to_spec)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*to_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*refer_to_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_refer_to_t* (*header_refer_to)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*referred_by_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_referred_by_t* (*header_referred_by)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_address_t* (*refer_to_spec)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_address_t* address);
     belle_sip_header_user_agent_t* (*header_user_agent)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*server_val)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*serval_item)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*product)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*product_version)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*via_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_via_t* (*header_via)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*via_parm)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*via_params)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*via_received)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_header_via_t* object);
     belle_sip_messageParser_via_address_return (*via_address)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_sent_protocol_return (*sent_protocol)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*protocol_name)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*protocol_version)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_transport_return (*transport)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*other_transport)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sent_by)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_www_authenticate_t* (*header_www_authenticate)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_state_value_return (*state_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_subscription_state_t* (*header_subscription_state)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_replaces_t* (*header_replaces)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_p_preferred_identity_t* (*header_p_preferred_identity)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_header_privacy_t* (*header_privacy)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*privacy_val)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_header_extension_return (*header_extension)	(struct belle_sip_messageParser_Ctx_struct * ctx, ANTLR3_BOOLEAN check_for_known_header);
     belle_sip_messageParser_header_name_return (*header_name)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_header_value_return (*header_value)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*message_body)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_uri_t* (*paramless_uri)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_uri_t* (*uri)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sip_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sips_token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sip_schema)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_uri_t* uri);
     void (*userinfo)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_uri_t* uri);
     belle_sip_messageParser_user_return (*user)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*user_unreserved)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*password)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hostport)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_uri_t* uri);
     const char* (*host)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_hostname_return (*hostname)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*domainlabel)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*toplabel)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_ipv4address_return (*ipv4address)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*ipv6reference)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_ipv6address_return (*ipv6address)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hexpart)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hexseq)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hex4)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_port_return (*port)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*uri_parameters)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_uri_t* uri);
     void (*uri_parameter)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*other_param)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_pname_return (*pname)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_pvalue_return (*pvalue)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*paramchar)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*param_unreserved)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*headers)	(struct belle_sip_messageParser_Ctx_struct * ctx, belle_sip_uri_t* uri);
     void (*header)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_hname_return (*hname)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_hvalue_return (*hvalue)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hnv_unreserved)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*escaped)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*ttl)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*three_digit)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_token_return (*token)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*reserved)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*unreserved)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*alphanum)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hexdigit)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*alpha)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     belle_sip_messageParser_word_return (*word)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*mark)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*hcolon)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*ldquot)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*rdquot)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*semi)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*comma)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sp_laquot_sp)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*sp_raquot_sp)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*equal)	(struct belle_sip_messageParser_Ctx_struct * ctx);
     void (*slash)	(struct belle_sip_messageParser_Ctx_struct * ctx);
    // Delegated rules
    const char * (*getGrammarFileName)();
    void	    (*free)   (struct belle_sip_messageParser_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pbelle_sip_messageParser belle_sip_messageParserNew         (pANTLR3_COMMON_TOKEN_STREAM instream);
ANTLR3_API pbelle_sip_messageParser belle_sip_messageParserNewSSD      (pANTLR3_COMMON_TOKEN_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the parser will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define LAQUOT      18
#define T__42      42
#define T__40      40
#define T__41      41
#define STAR      8
#define T__29      29
#define T__28      28
#define T__27      27
#define T__26      26
#define RAQUOT      19
#define T__25      25
#define HEX_CHAR      16
#define CRLF      4
#define T__24      24
#define HTAB      22
#define DQUOTE      7
#define EOF      -1
#define SEMI      9
#define LPAREN      20
#define COLON      13
#define T__30      30
#define RPAREN      21
#define T__31      31
#define T__32      32
#define SLASH      11
#define T__33      33
#define T__34      34
#define T__35      35
#define T__36      36
#define T__37      37
#define COMMA      10
#define LWS      5
#define T__38      38
#define T__39      39
#define SP      23
#define COMMON_CHAR      17
#define EQUAL      12
#define PLUS      15
#define DIGIT      6
#define OCTET      14
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for belle_sip_messageParser
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
